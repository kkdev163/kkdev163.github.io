<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>kkdev163 Blog</title>
        <link>https://kkdev163.github.io/blog</link>
        <description>kkdev163 Blog</description>
        <lastBuildDate>Tue, 12 Dec 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[云音乐 AI Agent 探索实践]]></title>
            <link>https://kkdev163.github.io/blog/ai-agent</link>
            <guid>https://kkdev163.github.io/blog/ai-agent</guid>
            <pubDate>Tue, 12 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[一. 前言]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="一-前言">一. 前言<a href="#一-前言" class="hash-link" aria-label="一. 前言的直接链接" title="一. 前言的直接链接">​</a></h2><p>本篇文章介绍了大语言模型时代下的 AI Agent 概念，并以 LangChain 为例详细介绍了 AI Agent 背后的实现原理，随后展开介绍云音乐在实践 AI Agent 过程中的遇到的问题及优化手段。通过阅读本篇文章，读者将掌握业界主流的 AI Agent 实现原理及实践优化手段，对应用自研 AI Agent&nbsp; 或理解 Open AI 最新提出的 Assistants API 都具有一定的参考价值。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="二-ai-agent-简介">二. AI Agent 简介<a href="#二-ai-agent-简介" class="hash-link" aria-label="二. AI Agent 简介的直接链接" title="二. AI Agent 简介的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="21-什么是-ai-agent-">2.1 什么是 AI Agent ?<a href="#21-什么是-ai-agent-" class="hash-link" aria-label="2.1 什么是 AI Agent ?的直接链接" title="2.1 什么是 AI Agent ?的直接链接">​</a></h3><p>相信阅读这篇文章的读者，都在今年感受到了大语言模型带来的爆炸影响力，也都有过与之直接进行交互的使用经历，感受到了它的强大和无所不知。</p><p>但大语言模型也存在一些限制，比如:</p><ul><li>他的数学计算能力相对薄弱，对于复杂的运算可能会出现错误。(如问 3457 <!-- -->*<!-- --> 43216 = ?，它可能会回答 149,623,912。这是错的正确答案是 149,397,712)</li><li>训练的数据集不包含近期的数据，所以无法直接知道最近的天气和最近发生的新闻。(OpenAI 近期推出的 gpt-4-1106-preview 的训练数据集更新至 23 年 4 月)</li></ul><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31496553896/bd2f/a8ff/50c9/4295423b347ffc68bf825d35d7427b65.png?imageView&amp;thumbnail=0x150" class="img_ev3q"></p><p>区别于直接与大语言模型进行对话，AI Agent 是通过工程化的手段，为大语言模型提供了获取外部工具、知识的能力。他是介于人类、大语言模型之间的代理。
当用户向 AI Agent 输入问题时，AI Agent 可以使用大语言模型作为推理引擎，将一个复杂的任务进行分解、给出任务执行规划。
之后 Agent 会调用外部工具获取结果，并将大语言的上次推理和工具调用结果返回给大语言模型，让大语言模型继续思考、规划。如此循环，直到将一个复杂的任务完成。</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31496650924/19ad/965d/f58e/692e7cd049f18756ac892c1350a8ceb2.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>基于以上的理解，我们可以给 AI Agent 下一个定义：</p><blockquote><p>他是人与大模型之间的智能代理，在接到任务时，它会使用大语言模型作为推理引擎，进行自主的任务规划、执行调度。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="22-ai-agent-的应用场景">2.2 AI Agent 的应用场景<a href="#22-ai-agent-的应用场景" class="hash-link" aria-label="2.2 AI Agent 的应用场景的直接链接" title="2.2 AI Agent 的应用场景的直接链接">​</a></h3><p>AI Agent 又有哪些应用场景呢？在<a href="https://mp.weixin.qq.com/s/JYu_oXWbWbasT1fcBRo-cA" target="_blank" rel="noopener noreferrer">《AI Agent 的千亿美金问题》</a>这篇文章中，作者详细介绍了 AI Agent 的应用场景，笔者从中引用 3 个大家可能比较熟悉的例子:</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-ai-辅助编程场景">1. AI 辅助编程场景<a href="#1-ai-辅助编程场景" class="hash-link" aria-label="1. AI 辅助编程场景的直接链接" title="1. AI 辅助编程场景的直接链接">​</a></h4><p><strong>Cursor</strong></p><p>Cursor 将自己的产品称为 AI-first IDE，其产品 UI 与 VS Code 接近，加入了很多 LLM 原生的 feature，比 Github Copilot 能做得更深入。可以认为是 AI agent 化的 VS Code + Github Copilot.</p><p><strong>Vercel v0</strong></p><p>v0 是由 Vercel 团队打造的 AI 前端代码生成工具。其使用过程非常直接：用户使用自然语言描述需求，v0 根据需求描述来生成组件代码。然后用户继续对不满意的地方提出修改意见，将其迭代为 v1、v2... 直到满足用户的要求。当用户想将一个生成网页的标题改为渐变色时，只需要选择标题部分并提出“增加一个渐变色”，产品便会只对这一部分代码进行修改。
<img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31497031491/3af8/e3d8/2bde/d8f06e1ab198ab6058b652e8099deac0.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-个人助理类场景">2. 个人助理类场景<a href="#2-个人助理类场景" class="hash-link" aria-label="2. 个人助理类场景的直接链接" title="2. 个人助理类场景的直接链接">​</a></h4><p><strong>Lindy.AI</strong></p><p>Lindy.ai 是一款基于办公场景的智能个人 AI 助手产品，帮助用户智能化处理日常办公任务。它可以帮人类做日程规划预定、邮件起草发送、会议纪要撰写和总结等。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31497111088/8f3d/d24c/62ec/f10b86135935f6536b07530b0c141d37.png?imageView&amp;thumbnail=0x200" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="三-如何来构建-ai-agent-">三. 如何来构建 AI Agent ?<a href="#三-如何来构建-ai-agent-" class="hash-link" aria-label="三. 如何来构建 AI Agent ?的直接链接" title="三. 如何来构建 AI Agent ?的直接链接">​</a></h2><p>对 AI Agent 做了简要的介绍后，我们接着来看，如何构建 AI Agent？目前市面上比较火的 Agent 相关的项目有 AutoGPT、BabyAGI、LangChain 等。</p><ul><li>AutoGPT 在今年 3 月份发布后取得了惊人的增长，目前已经是一个 152k start 的项目。</li><li>BabyAGI 则提出了 Plan and execute Agent，他的实现方式是: 一次性对任务做全局的规划，后续严格一步步执行，不再变更任务计划。</li><li>LangChain 则是一个通用的大语言模型应用层开发框架，提供了 Python、TS 两种语言库，内置各种 LLM 工具，在 Agent 领域，它也提供了多种 Agent 的实现思路，包括了 AutoGPT、BabyAGI 的实现，本文选择 LangChain 展开介绍。</li></ul><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31497244856/5c17/e532/8276/69590c64b6a2e52daef69db6a9217240.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="31-langchain-agent-使用示例">3.1 LangChain Agent 使用示例<a href="#31-langchain-agent-使用示例" class="hash-link" aria-label="3.1 LangChain Agent 使用示例的直接链接" title="3.1 LangChain Agent 使用示例的直接链接">​</a></h3><p>前文提到 LLM 不擅长解决复杂数学计算，我们接着来看 LangChain 使用外部工具来增强 LLM 的数学运算能力的<a href="https://js.langchain.com/docs/modules/agents/agent_types/structured_chat" target="_blank" rel="noopener noreferrer">官方示例</a>。本示例的用户提问是: "5~10 之间的随机数的平方是多少?" 。</p><p>一共分为 4 大步：</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31497314313/bb93/8461/bc42/793daedd6703ef9e0b72fb6d1209f510.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><ol><li>初始化大语言模型接口，可以传入 modelName、temperature、maxTokens 等参数。</li><li>初始化工具列表，示例中使用了一个 LangChain 内置的计算器工具，以及动态构建工具。我们重点来看下这个动态生成工具:<ol><li>name 是工具的名字</li><li>description 是工具的介绍，是供大语言模型理解的。</li><li>schema 是工具的入参定义 ，这里定义了 low 和 hight 都是数字类型，分别代表 随机数的 下界 和 上界。</li><li>func 是工具的方法调用定义，参数是 schema 中的定义，函数体是一段 js 随机数生成代码。</li></ol></li><li>有了工具和大语言模型接口后，随后构造出了 Agent 执行器。</li><li>最后一步是将用户的输入传给 Agent 执行器。</li></ol><p>最后输出的随机数平方是 45.067</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="32-langchain-agent-执行步骤拆解">3.2 LangChain Agent 执行步骤拆解<a href="#32-langchain-agent-执行步骤拆解" class="hash-link" aria-label="3.2 LangChain Agent 执行步骤拆解的直接链接" title="3.2 LangChain Agent 执行步骤拆解的直接链接">​</a></h3><p>在本地执行的过程中，Langchain 会输出详细的执行调度日志，如下图所示:
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31497541074/b081/f005/c27f/ac60c9efb866ead167a5efc72d4b1f8d.png?imageView&amp;thumbnail=0x600" class="img_ev3q">
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31497541571/e983/e78c/43ac/feeb6e5233fab96db4e8a4d5fda1413d.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>通过分析这些日志可以揭开 Langchain Agent 背后的运行原理。</p><p><strong>执行步骤一: 调用大语言模型</strong></p><p>如下图所示， Agent 执行的第一步是将用户的输入与一个系统的 prompt 进行组装，我们暂时先称其为 <strong>“魔法咒语”</strong>，后续会详细介绍。大语言模型会返回他的思考: "用户的问题是 5~10 之间的随机数的平方。我可以使用「随机数生成工具」先生成一个随机数，然后使用计算器工具计算它的平方。" 并以 JSON 指示下一步采取的动作是: 调用「随机数生成工具」，入参为 low 5， high 10。</p><p><img loading="lazy" src="https://p2.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527119938/c3d5/bf1f/6799/7ad2cbf70950f6557a490679a24bee2c.png?imageView&amp;thumbnail=0x500" class="img_ev3q"></p><p><strong>执行步骤二: 调用工具-随机数生成器</strong></p><p>接着 Agent 执行器 会调用「随机数生成工具」入参为 <code>{low:5, hight:10}</code>，工具返回 <code>6.7132</code></p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527129368/eace/043f/7ad3/68828c800ddc31ce7e15970543aa399a.png?imageView&amp;thumbnail=0x500" class="img_ev3q"></p><p><strong>执行步骤三: 调用大语言模型</strong></p><p>如下图所示，Agent 执行器会把用户的原始问题，和上一步大语言模型的思考、工具调用和工具的输出做拼接，传给大语言模型继续思考。大语言模型回复说: 随机数是 6.71..，现在我可以使用计算器工具来计算它的平方值。并使用 JSON 格式指示下一步动作是: 调用计算器工具，入参是 6.71..的平方的数学描述。
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527131673/ac62/c317/f588/75c4cd17f4ed9ee445bb4fed484e38aa.png?imageView&amp;thumbnail=0x500" class="img_ev3q"></p><p><strong>执行步骤四: 调用工具 计算器</strong></p><p>接着 Agent 执行器 会调用 计算器工具，入参为 <code>6.71...^2</code>，计算器工具返回的结果为 <code>45.06..</code></p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527135516/9b78/b2ee/0837/095ccb5c82e7557615469e0312472704.png?imageView&amp;thumbnail=0x500" class="img_ev3q"></p><p><strong>执行步骤五: 调用大语言模型</strong></p><p>如下图所示: Agent 执行器将上一步的思考、工具调用、结果做拼接，传递给大语言模型继续思考。大语言模型回复说: 我知道了最终的结果，答案是 45.067
<img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527137892/7413/5867/816e/5677903179edad27e55e37338d25e86c.png?imageView&amp;thumbnail=0x500" class="img_ev3q"></p><p>当我第一次运行 Agent 示例，看到 Agent 能如此丝滑地一步步思考，执行外部工具，并得到最终结果时，我非常惊叹于 Agent 的能力，也十分好奇背后的原理的是什么。经过一番探索，发现其核心原理就藏在魔法咒语里。 我们接着来看这里的魔法咒语是什么？</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="33-langchain-agent-的魔法咒语">3.3 LangChain Agent 的魔法咒语<a href="#33-langchain-agent-的魔法咒语" class="hash-link" aria-label="3.3 LangChain Agent 的魔法咒语的直接链接" title="3.3 LangChain Agent 的魔法咒语的直接链接">​</a></h3><p><strong>魔法咒语片段一</strong></p><p>魔法咒语是由多个片段组成，片段一指示了大语言模型可以使用一些工具，但必须要遵循工具的 JSON Schema，然后给出了 合法的 JSON Schema 示例。紧接着给出了大语言模型可用的工具介绍，包含工具的名字、工具的描述和入参的 JSON Schema。</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526237910/3b3b/fae3/41d0/a93b5f663492f6957ec02c0ff94201ce.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p><strong>魔法咒语片段二</strong></p><p>片段二主要指示大语言模型如何使用工具。需要通过一个 JSON markdown 格式包裹，包含 action 和 action_input 字段，action 必须为 Final Answer 或 工具名。并给出了 Action 的示例。
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526241338/10be/3e35/e84b/88c4ef7834ecedd4442b6c4d30564a60.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p><strong>魔法咒语片段三</strong></p><p>我们知道大语言模型是生成式 AI，而片段三指示了大语言模型生成的内容需要遵循的段落结构。分别是:</p><ul><li>Question 问题是什么</li><li>Thought 思考如何去解决</li><li>Action 下一步采取的行动</li><li>Observation: 行动的结果</li></ul><p>并指示生成的思考、行动、结果 是可以重复 N 次的。并指示 LLM 在知道最终的结果后，输出 Final Answer。</p><p>这一段是大语言模型能将复杂任务分解、逐步执行、继续思考如此循环的关键。而这一思考框架称为 <a href="https://www.promptingguide.ai/techniques/react" target="_blank" rel="noopener noreferrer">ReAct</a>。</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526242449/8e02/176f/201a/b522e940fff252f7293d70541b0b4244.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>知道了 LangChain 背后的魔法咒语后，我们能否直接在 ChatGPT 中直接输入魔法咒语试下效果呢？答案是可以的。</p><p>我们把这段<a href="https://gist.github.com/kkdev163/9711474d50cd189c3e0757dc1382536f" target="_blank" rel="noopener noreferrer">魔法咒语</a>直接复制到 ChatGPT 上。我们看到大模型确实按照 Thought、Action、Observation 的段落格式进行生成输出。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527144465/25f8/b728/8b3f/d1d052f20b883e56acec10517a0e7f8c.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>但好像又有点问题，他返回的结果和此前步骤拆解中的步骤一不太一样。步骤一只返回 需要调用「随机数生成器工具」，随后 Agent 会介入工具调用，完成工具调用后再交由大语言模型进行思考，而这里大语言模型直接返回了后续的工具调用结果、下一步思考、下一步的行动，在多步重复后，把一个错误的结果输出给我们了，那么问题出在了哪里呢？</p><p>事实上在 Agent 执行器调用大语言模型时，有一个关键的参数 Stop Sequences，这个参数的作用是让大语言模型在准备生成这个词前就强制停住，不再往下生成。</p><p>Agent 会传入 Observation 作为这个参数的值，意思就是让大语言模型生成到 Observation 时就强制停止，这样控制权才会转交回给 Agent，Agent 可以继续调用外部工具、执行后续的步骤。</p><p>我们在 ChatGPT 上加上这个参数，这一次大语言模型的输出就符合预期了。以上就是 LangChain Agent 的核心原理。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527147102/35d3/13ea/7179/ad811329b62b5695b62c1cf661b390cd.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="四-云音乐-adora-平台在-agent-方面的实践">四. 云音乐 Adora 平台在 Agent 方面的实践<a href="#四-云音乐-adora-平台在-agent-方面的实践" class="hash-link" aria-label="四. 云音乐 Adora 平台在 Agent 方面的实践的直接链接" title="四. 云音乐 Adora 平台在 Agent 方面的实践的直接链接">​</a></h2><p>Adora 是网易云音乐内部的智能数字助理搭建平台，提供 LLM 相关服务。内置专属 Chat UI 界面、配置中心，可轻松实现知识库管理、智能问答、意图识别、行为翻译等功能。帮助用户快速构建属于自己的智能助手。我们后续也会有文章介绍 Adora，各位读者敬请期待。</p><img loading="lazy" src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/29094596887/49c4/4e2a/f6b6/19a0760d9ebde7288c1c255ddf1f7321.gif" height="500" class="img_ev3q"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="41-基础能力整合">4.1 基础能力整合<a href="#41-基础能力整合" class="hash-link" aria-label="4.1 基础能力整合的直接链接" title="4.1 基础能力整合的直接链接">​</a></h3><p>接着我们来看云音乐 Adora 平台在 Agent 方面的实践。首先是基础能力整合。</p><p><strong>步骤一</strong></p><p>我们还是基于这段官方示例进行扩展。这里的 ChatOpenAI 是 LangChain 提供的大语言模型接口，底层是调用的 OpenAI 官方 Client。由于各种原因，我们无法直接使用，所以要做下替换。</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526439175/2841/2d6c/8481/53da7e66ce0f48f4ffed0a924e3d6f2d.png" class="img_ev3q"></p><p>得益于 LangChain 的面向对象封装，我们只需继承 LangChain 的 ChatOpenAI 类，重写其中的一个函数即可。将 OpenAI 官方 Client 调用 替换为内部封装的 gpt-client 即可。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31528875611/241a/1e41/73a6/02f8cb5f4de5bf35dc4fd714d4688a31.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p><strong>步骤二</strong></p><p>第二步是将 Adora 平台在线录入的服务转换为 LangChain 的 Tools。我们在 Adora 原有的服务定义上，增加了 description_for_ai 字段，以及 input_params 字段，有了这些配置，我们就可以将 Adora 在线录入的服务，转换为 LangChain 的 Tool。
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526469574/7ae1/6efc/b1ab/88ae0cd1c11e2107a3529a98f90288d5.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>做完了以上的两步，再加上一些胶水代码，我们就为 Adora 平台整合入了 Agent 的能力。</p><p>Adora 平台的用户在创建 Agent 智能体时，只需在可视化界面上，选择 Agent 智能体动作，并圈选这个 Agent 所需的服务，即可完成一个 Agent 的构建。
<img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526486375/2385/c1a3/7566/fa85ddbb13c75f30ced8c5ed6049cf8e.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>在完成基础能力的整合后，我们还遇到了哪些问题，以及做了哪些优化呢？</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="42-问题及优化手段">4.2 问题及优化手段<a href="#42-问题及优化手段" class="hash-link" aria-label="4.2 问题及优化手段的直接链接" title="4.2 问题及优化手段的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="问题-1-如何高效地调试-agent-">问题 1: 如何高效地调试 Agent ？<a href="#问题-1-如何高效地调试-agent-" class="hash-link" aria-label="问题 1: 如何高效地调试 Agent ？的直接链接" title="问题 1: 如何高效地调试 Agent ？的直接链接">​</a></h4><p>我们此前提到 Agent 在执行时会输出日志，对于我们理解 Agent 的执行逻辑很有帮助，但这些日志也存在一些冗余的信息，并且是平铺式的，难以快速提炼关键信息。
<img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526523668/9354/0dcc/371c/c8a593a15c9655612b9b276962356904.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>我们做的第一步是将这些输出日志做采集、提炼。将 Agent 的执行步骤，归纳为关键的 Thought 和 Tool 两大步骤，并以结构化的方式在前端做呈现。</p><p>如下图所示，在 Thought 中我们会展示此次调用大语言模型的 system prompt、human input，以及大语言模型的回答，并展示出整体的耗时。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527163349/1d2c/d06d/ba58/b1d7aca224d5d6ce5991261fc2885a37.png?imageView&amp;thumbnail=0x500" class="img_ev3q"></p><p>在 Tool 环节，会展示 Agent 使用的工具、耗时。以及工具的入参和出参。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527166398/051f/4f46/9c0d/49ab92e35fac031f581076ed852543bb.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527170021/3b43/b068/14ea/4aca8beed7732ccb9106757689c4c2dc.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>通过结构化的展示，我们将 Agent 执行的每一步，都可视化呈现在开发者眼前，若 Agent 的思考出错或工具调用传参不对，开发者都可以及时看到，并通过改进 prompt 优化整体效果。</p><p>值得一提的是 LangChain 官方出品的开发者平台 LangSmith，也将 Agent 的执行可视化作为了关键特性在宣传，可见可视化调试的重要性。
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527170344/1272/77c8/1617/651e2ba3caf1872421f7780a6b9b331a.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="问题-2-如何解决-agent-执行的异常中断">问题 2: 如何解决 Agent 执行的异常中断<a href="#问题-2-如何解决-agent-执行的异常中断" class="hash-link" aria-label="问题 2: 如何解决 Agent 执行的异常中断的直接链接" title="问题 2: 如何解决 Agent 执行的异常中断的直接链接">​</a></h4><p>我们在调试过程中发现，当 LLM 返回的 action_input 不符合工具的 schema 定义时，Agent 会执行抛错，中断整体执行逻辑。 此外在外部接口调用返回异常时，tool 也会直接抛错，导致 Agent 的整体执行逻辑中断。</p><p>举例来说，正常情况下使用 「会议室查询」服务，需要有 buildingName、bookDay 两个参数，我们也在 Prompt 中提示了大语言模型这两个字段为必填项。</p><p>但 LLM 由于上下文信息过多，可能会出现遗忘的现象。导致输出的结果中，遗漏了 buildingName 字段。当前 LangChain 的默认处理是当 Schema 校验不通过时，直接抛错，这样 Agent 的执行就结束了。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31995149972/6cc7/342f/21a5/9ec142f511b4a13865546c22f9987e57.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>我们的优化做法是改写 DynamicStructuredTool 逻辑，在入参不符合预期时，不直接抛错，而是给 LLM 返回错误提示，让其继续思考。这样 LLM 在看到上一次工具的输入、错误提示后，在下次思考时，就会尝试纠正自己，给出正确的工具入参。具体的改写代码如下所示:</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526595785/b4b2/500c/74b0/7d3db8da4c9bc589bdff783a9634885a.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>同理在接口调用环节，如果遇到外部返回异常时，也可以采样同样的思路进行优化。比如会议预定接口，假设接口调用时传入了一个已被占用的时段，后端接口响应就会返回 <code>{ code: 400 ，message: 该时段已被占用}</code> ， 此时在 request 中，遇到返回码非 200 时，不直接抛错，而是包装一个错误信息返回给 LLM，这样 LLM 在下次思考时，也会纠正自己，尝试给出合理的工具入参。参考代码如下所示:</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526618297/a81a/6733/e3d6/ac1e3e2b88670b63ece249853e7f8822.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="问题-3-如何让-agent-请求用户协助">问题 3 如何让 Agent 请求用户协助？<a href="#问题-3-如何让-agent-请求用户协助" class="hash-link" aria-label="问题 3 如何让 Agent 请求用户协助？的直接链接" title="问题 3 如何让 Agent 请求用户协助？的直接链接">​</a></h4><p>我们此前提到，Agnet 的执行过程，只有思考、工具调用的重复循环，直到给出任务执行的最终结果。中间没有留给用户介入的机会。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526837226/5de2/fbb4/9edf/bbee4cdd1b42bfb0a0d6e81449f65438.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>但我们在一些场景，我们是希望能有用户介入的机会，比如在订咖啡、订会议室的场景，在上下文信息不足时，我们希望 Agent 能够向用户去征集偏好、选项，而不是自行决策，一条路走到黑，导致预定失败。</p><p>我们的做法是: 首先调整工具的描述，告知 LLM 在不知道参数时，需要向用户提问。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527180856/4a03/e8a0/849c/c976405e1b7d1bd6df9cba76d5355756.png?imageView&amp;thumbnail=0x500" class="img_ev3q"></p><p>但只靠这一步，效果并不好，有时 LLM 的输出会不符合 Action 格式要求，所以我们还对系统提示词做了逐步的调整，以强化对 LLM 的提醒。</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527184694/a358/7f10/b264/5d0114bdb2d285a731028201d3b51ac5.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>通过以上的 Prompt 优化，现在当输入 「今天下午有哪些会议室?」时，大语言模型会回复「请问您想要查询 1 号楼、2 号楼还是 3 号楼的会议室？」。现在大语言能够正确地向用户提问了，把控制权交给了用户，后续用户回答 「2 号楼」时，我们只需将上一轮的对话作为记忆带到下一轮的 Agent 执行中，就达成了人工介入 Agent 补充信息的效果。以会议室预定为例，详细的步骤如下所示:</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527189480/d775/e9db/4aeb/4d8ba2791bb81cab03aa5a7969f6fd42.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>最终实现的效果:</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526904181/3118/21a2/c381/20db03543e7b35507b9b9a45c60c00d4.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>我们通过可视化调试界面加深下理解: 在第三轮对话的第一个 Thought 环节。第一条 system 为系统提示词，后续的 human、ai、human、ai 是前两轮的对话记忆，最后一个 human 才是第三轮对话的用户输入，这 6 消息整体作为入参 messages 发送给 LLM ，最后一条 ai 是这次调用 LLM 的返回结果。</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526900214/8b83/fe2b/6ede/4e973c443176c264ae0141c152f0a285.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>会议预定 Agent 完整执行步骤如下:</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526926384/fc95/2ff4/46b3/e72158915f529013c05d996f45e51c9b.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526930275/1412/834c/5fd3/557e5be791f470a8e322e34f9b3e89af.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526930832/4ce4/5e48/87ac/7d7bcd7af16e3e587d50135abe1dc1cd.png?imageView&amp;thumbnail=0x300" class="img_ev3q"></p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526936365/4ea3/dce1/d1c8/aab51d572c56380c0e336f30f3b0b205.png?imageView&amp;thumbnail=0x500" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="问题-4-模型推理能力响应速度">问题 4 模型推理能力、响应速度<a href="#问题-4-模型推理能力响应速度" class="hash-link" aria-label="问题 4 模型推理能力、响应速度的直接链接" title="问题 4 模型推理能力、响应速度的直接链接">​</a></h4><p>在实践中，我们遇到的最大问题是模型的推理能力与响应速度无法兼得。举例来说，当我以 「帮我预定 2 号楼 7 楼 今天下午 3 点到 5 点的会议室」 这个问题进行测试时，gpt-4.0-0613 模型分别以 19.07 秒、24.78 秒、19.01 秒完成任务，中间没有任何步骤推理出错。而使用 gpt-3.5-turbo-0613 模型时，在第一次测试时，Agent 调用的 tool 并不存在，导致任务失败，第二次测试时，Agent 第一步调用 tool 仍然不存在，但在第二步思考时，Agent 进行了纠正，整体完成任务耗时为 13.51 秒。第三次测试时，Agent 一次性完成了任务，仅耗时 8.09 秒。</p><p>下图为 gpt-3.5-turbo-0613 第二轮测试效果:</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526967065/bb68/46f2/f5d9/f5d5af02037cb687ea8b6b6b6d45eb7d.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>整体测试总结来看，gpt4.0-0613 可以以 100%的正确率完成任务，但平均解题耗时需要 20+秒，而 gpt-3.5-turbo-0613 虽然任务完成率只有 66% ，但整体耗时仅为 10.8 秒。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526969998/daf2/f449/3b80/890f24cd797ee378e056ab52a40b1b0e.png?imageView&amp;thumbnail=0x200" class="img_ev3q"></p><p>对于 gpt-4 的推理能力更强，应该是符合我们大家直觉的，但耗时更久却有点反直觉。我们随后查看了官方的文档，在文档中可以看到，gpt-4 的 出字速度确实是比 gpt-3.5 要慢上几倍，这是符合官方预期的。</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31526987426/6a83/edec/b6cc/87ca09e18de1fab9ab803882fcfbf9a7.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><p>受限于推理能力、响应速度难以兼得。当下想要将 Agent 正式投入生产环境，还是有一些挑战的。比如当我们把会议预定、咖啡预定 Agent 在公司 1024 的活动上推出时，部分用户身上表现出了一定的等待焦虑:「为什么还没有反应」「我还要等多久」「是不是挂了」。</p><p>在这里工程上能做的优化可能比较有限，比如除了 Loading 外，我们可以加入一些其他的响应提示，如 Agent 目前的思考步骤，以缓解用户的焦虑。</p><p>整体上，推理能力与速度的同步提升，还是较大依赖大模型厂商的逐步优化。正如 OpenAI 最新发布的 gpt-4-turbo-1106 在响应速度上就已经有了一些提升。我们相信随着推理能力和响应速度的提升，基于大语言模型实现的 AI Agent 在不远的未来会有大规模的落地的可能。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/31527042226/0924/d426/17e1/7cf24145de2110bcec9228feee92c2a4.png?imageView&amp;thumbnail=0x600" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="五-总结">五. 总结<a href="#五-总结" class="hash-link" aria-label="五. 总结的直接链接" title="五. 总结的直接链接">​</a></h2><p>在 11 月的 OpenAI 的开发者大会上，官方同时也发布了最新的 <a href="https://platform.openai.com/docs/assistants/overview" target="_blank" rel="noopener noreferrer">Assistants API</a> ，为构建 AI Agent 提供了官方支持，使得 AI Agent 的构建更加简单、高效。虽然官方的方案可能会演变为最终方案，但我们相信对 LangChain Agent 的实践不会白费，他会加深我们对 Agent 发展脉络的理解，而且使用过后，我们就会发现 Assistants API 的封装 与 LangChain Agent 有许多共通之处。我们后续也会对此进行跟进、实践，请大家继续关注我们，我们会第一时间分享我们的实践经验。</p><p><strong>引用</strong></p><ul><li><a href="https://mp.weixin.qq.com/s/JYu_oXWbWbasT1fcBRo-cA" target="_blank" rel="noopener noreferrer">AI Agent 的千亿美金问题：如何重构 10 亿知识工作职业，掀起软件生产革命？</a></li><li><a href="https://js.langchain.com/docs/modules/agents/agent_types/structured_chat" target="_blank" rel="noopener noreferrer">LangChain Agent 示例</a></li><li><a href="https://platform.openai.com/docs/assistants/overview" target="_blank" rel="noopener noreferrer">Assistants API</a></li></ul>]]></content:encoded>
            <category>LLM、AI Agent、LangChain</category>
        </item>
        <item>
            <title><![CDATA[Corona技术专题-时序数据分析]]></title>
            <link>https://kkdev163.github.io/blog/tsdb</link>
            <guid>https://kkdev163.github.io/blog/tsdb</guid>
            <pubDate>Thu, 16 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[一. 前言]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="一-前言">一. 前言<a href="#一-前言" class="hash-link" aria-label="一. 前言的直接链接" title="一. 前言的直接链接">​</a></h2><p>在 Corona 平台的技术体系建设中，时序数据库承担了时序数据的「存储」和「分析」 的关键作用。本文将介绍三款数据库在 Corona 时序分析场景下的应用。分别是 InfluxDB、ClickHouse、ElasticSearch。 无论您是大前端或是服务端开发同学，通过本文的阅读您都将掌握时序数据库的基本概念、特点，从而帮助您更好地理解和使用市面上的监控类产品，也为您创建类似的服务提供一些启发。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="二-时序数据库简介">二. 时序数据库简介<a href="#二-时序数据库简介" class="hash-link" aria-label="二. 时序数据库简介的直接链接" title="二. 时序数据库简介的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="21-什么是时序数据">2.1 什么是时序数据？<a href="#21-什么是时序数据" class="hash-link" aria-label="2.1 什么是时序数据？的直接链接" title="2.1 什么是时序数据？的直接链接">​</a></h3><p>时序数据是按时间顺序排序的一组数字序列，它可以反应某一现象的变化规律。在我们的日常生活中时序数据随处可见，如「天气预报时序走势图」它反映了温度随时间变化的规律; 如「油价时序走势图」 它反应了油价随时间变化的规律:</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/25814972757/24f6/3597/6072/776369703f0b6cee8911e1e70b59f14c.png" class="img_ev3q"></p><p>在应用监控领域，时序走势图能够反应「应用健康度」随时间变化的趋势，是用户最为关注的几类图表之一:
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/25815108848/035d/b85c/4202/b119c485590f3ba77ce617b1c764934e.png" class="img_ev3q"></p><p>除了分钟级粒度的数据，有时也需要按 「小时级」、「天级」 粒度查看走势数据：</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/25815134080/fb90/76ff/2430/35b3938287844f0789251a69bebef9b5.png" class="img_ev3q"></p><p>除了整体维度，用户也可以按某个特征维度对走势数据做分类(下表对比了不同档次机型的加载时间走势):
<img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/25815159791/87d8/db18/29f8/f11d5e43457ebfbbf0ce1505be9ac969.png" class="img_ev3q"></p><p>对时序数据做上述分析的过程我们可以称其为时序数据分析。便于存储时序数据、提供时序数据分析能力的数据库我们称其为时序数据库。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="22-时序数据库中的基本概念">2.2 时序数据库中的基本概念<a href="#22-时序数据库中的基本概念" class="hash-link" aria-label="2.2 时序数据库中的基本概念的直接链接" title="2.2 时序数据库中的基本概念的直接链接">​</a></h3><p>1.<strong>时间列</strong></p><p>时序数据库的主要查询和分析能力与「时间」字段有较大关联，所以在设计时序数据库的表结构时通常会将「时间」字段作为「索引」字段。</p><p>这样的设计方便应用快速筛选出目标范围的时序数据，并且时序数据库也提供了一系列「时间」相关的工具函数，方便我们在时序数据上按不同的时间粒度(如 分钟、小时、天 )做聚合分析。</p><p>2.<strong>维度列</strong></p><p>在储存时序数据时，通常会附带上这条数据的维度信息，维度信息可以在后续分析时作为过滤或聚合的条件。如天气时序数据中，会有「城市」维度，维度值为 北京、上海、杭州 等。 油价时序数据中，会有「汽油标号」维度，维度值为 92、95、98 等。</p><p>在表结构设计时通常高频的查询和聚合维度也是建议作为「索引」字段存储。</p><p>3.<strong>数值列</strong></p><p>时序数据的数值，如天气时序数据中的「温度值」、油价时序数据中的「价格」，会作为数值列进行存储。</p><p>时序数据库会提供一系列的工具函数对数值列做分析计算。常见的分析函数有：</p><ul><li>avg 求平均值</li><li>max 求最大值</li><li>min 求最小值</li></ul><p>组合以上的基本概念，我们可以运用时序数据库就做一些常见的时序分析，如:</p><p>查询 2023 年 9 月份杭州每天的平均温度值走势 SQL：</p><div class="language-SQL codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-SQL codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SELECT toStartOfDay(time), avg(degree)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM table_temperature</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WHERE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    time&gt;='2023-09-01' AND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    time&lt;'2023-10-01' AND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    city='杭州'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GROUP BY toStartOfDay(time)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查询最近 10 年各品类汽油每年的平均价格走势 SQL:</p><div class="language-SQL codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-SQL codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SELECT toYear(time), model, avg(price)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM table_gas</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WHERE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    time&gt;='2013-01-01' AND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    time&lt;'2023-01-01'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GROUP BY toYear(time), model</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>4.<strong>数据过期时间 TTL</strong></p><p>时序数据的另一个特点是关注近期的数据，距离当前比较久远的数据相对来说没那么重要，有时出于存储容量的考虑，我们甚至会希望自动删除老旧的数据。</p><p>时序数据库一般会提供 TTL (Time To Live) 功能，在设计数据库表结构时，一般会根据数据表的聚合粒度设置相应的过期时间。如原始数据或分钟级的数据保留 30 天， 小时或天级的聚合数据保留 1 年。</p><p>简要介绍完 时序数据分析 和 时序数据库 的基本概念后，下文将介绍三款经典数据库在 Corona 时序分析场景下的应用。分别是 InfluxDB、ClickHouse、ElasticSearch。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="三-influxdb">三. InfluxDB<a href="#三-influxdb" class="hash-link" aria-label="三. InfluxDB的直接链接" title="三. InfluxDB的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="31-简介">3.1 简介<a href="#31-简介" class="hash-link" aria-label="3.1 简介的直接链接" title="3.1 简介的直接链接">​</a></h3><p><a href="https://docs.influxdata.com/influxdb/v2.6/get-started/" target="_blank" rel="noopener noreferrer">InfluxDB</a> 是一款经典的开源时序数据库。在 InfluxDB 中有几个常用的概念</p><p>1.<strong>measurement</strong></p><p>measurement 是 InfluxDB 中的数据表。一张 measurement 中可包含一个时间列(time column)、多个维度列(tag column)、多个数值列(field column)。</p><p>用户无需手动使用 CREATE 语句创建 measurement，InfluxDB 会在写入的数据时动态创建 measurement、动态新增维度列与数据列。</p><p>2.<strong>tag</strong></p><p>tag column 是 InfluxDB 中的维度列，InfluxDB 会为所有的维度列建立索引。在设计表结构时，我们需要将经常作为查询条件、聚合条件的字段作为 tag 列进行存储。</p><p>在设计 tag 列时，需要特别留意的是 tag 列的潜在值是要可收敛的，不能是无限增长的。</p><p>举几个对比的例子:
|Good Case| Bad Case|
|---|---|
| 监控页面的域名(location.host) | 监控页面的 URL (location.href) |
| 设备操作系统 | 设备 UUID |
| 歌曲文件类型 | 歌曲 ID |</p><p>以监控页面的 URL 为例，它可能会带有 路径参数 或 query 参数，导致维度值非常离散，我们需要避免将这一类难以聚合的字段设计为 tag 列的原因是: InfluxDB 为了 查询/写入 性能，会为所有的 tag 列建立索引，而索引的规模直接影响内存的占用开销。若 tag 列设计不合理，极易造成 InfluxDB 的内存持续增长甚至出现 OOM 的情况。</p><p>3.<strong>field</strong></p><p>field column 是 InfluxDB 中的数值列，数据类型可以是数字、字符串型。在设计表结构时，我们需要将未来用于数值统计分析的字段作为 field 列存储。一些不常作为查询条件、无法收敛的额外信息也可以放到 field 列进行存储。</p><p>4.<strong>retention policy</strong></p><p>RP(retention policy) 数据保留策略，是 InfluxDB 的 TTL 实现机制。RP 可以在创建数据库后随时新增、变更。我们可以为一个数据库创建多个 RP。如:</p><ul><li><code>create retention policy one_week on apm_log duration 7d default;</code></li><li><code>create retention policy one_year on apm_log duration 365d;</code></li></ul><p>在数据写入时，我们可以根据数据的重要度、时效性显示地指定使用哪个 RP，数据在超过保留时间后，就会自动删除。</p><p>5.<strong>continue query</strong></p><p>CQ(continue query) 持续查询，可用于 数据归档、降采样。举例来说当我们采集的原始数据是分级的，我们可以使用 CQ 功能，将原始表的数据聚合写入小时级表。</p><div class="language-SQL codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-SQL codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE CONTINUE QUERY "cq_event" ON "apm_log"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BEGIN</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  SELECT SUM("pv") as pv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  INTO "one_year"."cq_hour_event"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  FROM "one_week"."cq_minute_event"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  GROUP BY time(1h), *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">END</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>创建完 CQ 任务后，InfluxDB 就会每小时执行一次聚合任务。这样后续在查询的时候，可以直接从聚合结果中查询，加快查询速度。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="32-在-corona-中的应用场景">3.2 在 Corona 中的应用场景<a href="#32-在-corona-中的应用场景" class="hash-link" aria-label="3.2 在 Corona 中的应用场景的直接链接" title="3.2 在 Corona 中的应用场景的直接链接">​</a></h3><p>InfluxDB 在 Corona 平台中主要有以下几个应用场景:</p><ul><li><p>存储 C 端用户上报的 访问量、性能 等「预聚合结果」数据</p></li><li><p>存储平台自身运行健康度的「原始」数据</p><p>1.<strong>存储「预聚合结果」数据</strong></p></li></ul><p>在平台上线初期，我们曾使用 InfluxDB 直接存储用户端上报的原始日志，并使用 CQ 功能聚合出 分钟级、小时级 粒度的聚合表。 但随着接入应用数的增多、上报日志量 的持续增长，CQ 功能查询的内存开销出现了成倍的增长，导致 InfluxDB 的查询性能骤降。</p><p>随后我们在架构中引入了流计算引擎 Flink , C 端上报数据经过外部计算引擎预聚合后，再存入 InfluxDB。 经过这样的调整后，InfluxDB 只存储 C 端用户 每分钟、每小时的 聚合结果，每分钟存储量只与 series 量级(group by 维度组合结果量级) 挂钩，不再与用户量直接关联。 InfluxDB 自身的查询性能也得到保障。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/25813626113/3a14/a156/48e9/8d00d4f9ff0fcc7a33191dd04ae751c9.png" class="img_ev3q"></p><p>举例来说，我们可以在 Flink 中配置分钟级 PV 聚合任务：</p><div class="language-SQL codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-SQL codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SELECT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   TUMBLE_START(PROCTIME(), INTERVAL '1' MINUTE) as wTime,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   count(os) as pv,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   os as osName,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   moduleName as moduleName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM performance_log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WHERE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    props['mspm'] = 'ReactNativeApplication'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GROUP BY</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    TUMBLE(PROCTIME(), INTERVAL '1' MINUTE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    os,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    props['moduleName']</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们将 Flink 的聚合结果，写入 InfluxDB 表中，表结构示例如下 (moduleName、osName 为 tag 列, pv 为 field 列):</p><table><thead><tr><th>time</th><th>moduleName</th><th>osName</th><th>pv</th></tr></thead><tbody><tr><td>2023-01-01 12:00:00</td><td>rn-app-1</td><td>android</td><td>10000</td></tr><tr><td>2023-01-01 12:00:00</td><td>rn-app-1</td><td>iphone</td><td>8000</td></tr><tr><td>2023-01-01 12:00:00</td><td>rn-app-2</td><td>android</td><td>5000</td></tr><tr><td>2023-01-01 12:00:00</td><td>rn-app-2</td><td>iphone</td><td>4000</td></tr><tr><td>2023-01-01 12:01:00</td><td>rn-app-1</td><td>android</td><td>10000</td></tr><tr><td>2023-01-01 12:01:00</td><td>...</td><td>...</td><td>...</td></tr><tr><td>...</td><td>...</td><td>...</td><td>...</td></tr></tbody></table><p>这样在查询 每小时、每天 PV 走势时，我们可以直接基于 分钟级表 的数据做分析，相较于查询 每个用户上报的原始日志，查询数据量级大幅降低、性能大幅提升。 (细心的读者可能想到了，这里的 Flink 与 之前介绍的 InfluxDB CQ 的作用其实是一致的)</p><p>后续我们可以这样查询 InfluxDB:</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   moduleName</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   osName</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> pv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> rn_minute_pv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   moduleName</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'rn-app-1'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   osName</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'android'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">time</span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token string" style="color:#e3116c">'2023-01-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">time</span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token string" style="color:#e3116c">'2023-01-02'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">time</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain">h</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查询结果:
|time|moduleName|osName|pv|
|----|----|----|----|
|2023-01-01 12:00:00| rn-app-1 | android | 600000 |
|2023-01-01 13:00:00| rn-app-1 | android | 600000 |
|2023-01-01 14:00:00 | rn-app-1 | android | 600000 |
|...|...|...|...|</p><p>2.<strong>存储「原始」数据</strong></p><p>Corona 使用 InfluxDB 的另一个场景是存储平台自身运行健康度的「原始」数据，提升平台自身运行的可观测。 相较于 C 端场景的海量数据，机器、集群的健康度数据量级较为可控，我们可以使用 InfluxDB 进行存储、 CQ 计算。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/25813618765/8a94/0cef/531a/149c1e8d843c1c290ffec87a95f98538.png" class="img_ev3q"></p><p>例如当我们需要观测自建的「数据消费服务」的健康度时，我们使用 InfluxDB 采集每个进程每次批量处理的 事件数，同时包含 机器、进程、事件上报平台 等维度列。 表结构示例如下:
|time| hostname| pid | platform | events |
|---|---|---|---|---|
|2023-01-01 12:00:03| music-corona-worker-1 | 130616 | web | 10 |
|2023-01-01 12:00:04| music-corona-worker-1 | 128204 | android | 50 |
|2023-01-01 12:00:04| music-corona-worker-2 | 33096 | ios | 30 |
|...|...|...|...|...|</p><p>有了原始数据表，我们可以按 hostname 维度、platform 维度 观测集群的数据消费健康度。可视化方案推荐使用 <a href="https://grafana.com/docs/grafana/latest/" target="_blank" rel="noopener noreferrer">Grafna</a> :</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/25811684057/f86e/5476/6ad1/44105d090fb5944ae4d17cfe14e1acbb.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="四-clickhouse">四. ClickHouse<a href="#四-clickhouse" class="hash-link" aria-label="四. ClickHouse的直接链接" title="四. ClickHouse的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="41-clickhouse-简介">4.1 ClickHouse 简介<a href="#41-clickhouse-简介" class="hash-link" aria-label="4.1 ClickHouse 简介的直接链接" title="4.1 ClickHouse 简介的直接链接">​</a></h3><p>ClickHouse 是 OLAP(On-Line Analytic Processing) 联机分析处理数据库。在数据分析时，可直接对亿级原始日志做在线的实时聚合计算，并且能在秒级给出聚合结果。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="42-在-corona-中的应用场景">4.2 在 Corona 中的应用场景<a href="#42-在-corona-中的应用场景" class="hash-link" aria-label="4.2 在 Corona 中的应用场景的直接链接" title="4.2 在 Corona 中的应用场景的直接链接">​</a></h3><p>Corona 在引入 ClickHouse 之初，是为了补充原有 性能监控架构 的分析能力(如多维的分位数 P50、P95 统计能力)，随着我们对 ClickHouse 使用经验的积累 和 特性原理的认识，我们发现在 Corona 的性能分析应用场景上，ClickHouse 能够完全取代 Flink 、InfluxDB 的作用。并且整体的架构更加简洁，数据分析的方式也更加灵活、轻便。</p><p>目前 Corona 上的建设的性能监控指标，已完全由 ClickHouse 提供存储与数据分析的能力。主要的分析功能有:</p><p>1). 基于上报数据维度字段，提供多维的组合筛选能力</p><p>2). 在线实时聚合计算，统计 平均值、分位数、PV、UV 走势</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27203697679/8f89/97b2/e027/7a308942880eee04a2ab0c2cf155e706.png" class="img_ev3q">
3). 按照某个维度聚合，对比不同维度值的走势</p><p><img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27203727019/b63c/a464/52d4/c878914b569e737d0f99c7b283d811f0.png" class="img_ev3q">
4). 查看不同维度值的占比
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27203746572/18c9/d7bb/79ff/9379c160676d61043f15a56bf2f4795f.png" class="img_ev3q">
5). 统计指标值的详细分布情况
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27203752779/7787/66d2/0044/82ac157d3e60894c677232dda1c5a091.png" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="43-表结构设计及查询示例">4.3 表结构设计及查询示例<a href="#43-表结构设计及查询示例" class="hash-link" aria-label="4.3 表结构设计及查询示例的直接链接" title="4.3 表结构设计及查询示例的直接链接">​</a></h3><p>ClickHouse 在写入数据前，需要使用建表语句创建表结构。以 ReactNative 启动耗时监控为例, 以下为示例的表结构:</p><div class="language-SQL codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-SQL codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE rn_monitor_cold_boot_stage_local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `appName` String, -- 应用名，如 云音乐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `osName` String, -- 操作系统名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `appVersion` String, -- 应用版本</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `rnModuleName` String, -- ReactNative 模块名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `deviceTag` String, -- 设备性能分档</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `uploadTime` DateTime, -- 日志到达服务端时间</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `uid` String, -- 用户 uid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `stageName` String, -- 阶段名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `stageCost` Float32, -- 阶段耗时</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENGINE = MergeTree</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PARTITION BY (appName, osName, toYYYYMMDD(uploadTime))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ORDER BY (rnModuleName, uploadTime)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TTL uploadTime + toIntervalDay(90)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SETTINGS index_granularity = 8192, use_minimalistic_part_header_in_zookeeper = 1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在示例表结构中，uploadTime 为时间列， stageCost 为数值列，其他字段都为维度列。</p><p>MergeTree 是 ClickHouse 中最重要的表引擎，这种表引擎的特点是，数据在批量写入时，ClickHouse 会将数据写入新的临时分区中, ClickHouse 会在后台对 临时分区 与 已有的数据分区 做 Merge，以此来提高数据的写入性能。</p><p>PARTITION BY 数据的分区策略，示例表以 appName, osName, 上报时间(天) 所组成的联合键 建立分区。 ClickHouse 会为每个分区建立一个目录，合理的分区策略，可以让 ClickHouse 在后续查找数据时，直接选中分区目录，大大降低扫描的数据行数。</p><p>ORDER BY 数据的排序键，ClickHouse 默认会为排序键建立索引。</p><p>TTL 数据自动过期时间，此处设置了 90 天。</p><p>index_granularity 索引粒度为 8192 行(可理解为 8192 行数据，建立一条索引)。</p><p>示例数据如下:</p><div class="language-JSON codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-JSON codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "appName": "music"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "osName": "android",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "appVersion": "8.9.0",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "rnModuleName": "rn-playlistrank",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "deviceTag": "高端机",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "uploadTime": "2023-04-27 12:00:00",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "uid": "9999999",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "stageName": "render",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "stageCost": 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查询示例:</p><div class="language-SQL codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-SQL codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SELECT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    toStartOfDay(uploadTime) as "time",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    avg(stageCost) AS "avg",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    quantiles(0.5, 0.9)(stageCost) AS "quantiles",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    count() AS "pv",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uniq(uid) AS "uv"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM rn_monitor_cold_boot_stage_shard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WHERE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   uploadTime&gt;=1682006400 AND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   uploadTime&lt;=1682611199 AND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   stageName='render' AND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   rnModuleName='rn-playlistrank'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GROUP BY toStartOfDay(uploadTime)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ORDER BY toStartOfDay(uploadTime) ASC</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查询结果示例:
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27206521249/9c51/5849/7d58/8e6680e9d7da26baad1b1941e7ad81af.png" class="img_ev3q"></p><p>以上的查询示例，包含了 平均值、分位值、PV、UV 的统计，是 Corona 性能监控分析最基础 SQL。其他的性能分析都是基于该 SQL 的变种。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="44-数据读写架构-及-配套建设">4.4 数据读写架构 及 配套建设<a href="#44-数据读写架构-及-配套建设" class="hash-link" aria-label="4.4 数据读写架构 及 配套建设的直接链接" title="4.4 数据读写架构 及 配套建设的直接链接">​</a></h3><p>得益于 ClickHouse 的高性能 (举例来说，当上述的示例 SQL 的扫描数据量级达到 6 亿行时，也仅需 2 秒就可以完成数据分析），
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27206860033/532e/16ce/5261/fe4aa4e5ecd9abd708917bd8ba3d0e11.png" class="img_ev3q">
在绝大多数的场景，我们可以直接使用 ClickHouse 直接对原始数据做实时聚合分析，这也使得我们的性能分析架构变得简洁。</p><p><strong>数据写入</strong></p><p>在数据写入前，我们使用自建的「性能日志处理服务」订阅不同 type 的性能日志，每个消费者订阅一种日志类型，在预处理后，会根据每张表的建表分区规则，在服务端对数据做预分区，每个分区的数据单独批量写入 ClickHouse。以此达到 批量写入 同时又减少 ClickHouse 在后台对数据做再次分区的开销，提高写入性能。</p><p>数据批量写入时，使用了自建的集群版 ClickHouse NodejsClient，做数据 Schema 校验 并 随机请求集群中的 Node 达到数据均匀分片的目的。
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27207198216/af50/824e/2c70/8b35903bd05edb81a90aaa0a8272382e.png" class="img_ev3q">
<strong>数据查询</strong></p><p>细心的读者可能发现了，我们在上面示例中，我们所建的示例表，是以 <code>_local</code> 结尾，而我们的查询示例表是以 <code>_shard</code> 结尾。</p><p>事实上，我们在建表时，会同时创建 local 表 与 shard 表。在数据写入时，性能日志处理服务是直连每个 ClickHouse node 向 local 表写入数据。可以理解为每个 node 只保存了 整个完整表的 1/4 行的数据。在查询时，查询任意一个节点的 shard 表，ClickHouse 会在后台自动汇总 4 个 node 的全部数据做分析。
<img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27207917384/122c/e08b/999b/5008a4c20dcc5edabb16e182b21df83f.png" class="img_ev3q">
注: 该图 local 表中的行号仅用于示意分片的数据量级，并非实际的存储或索引行号。</p><p>在自建的性能日志处理服务 和 可视化后台 上，我们也加入了一些监控指标，来观测 ClickHouse 集群的读写健康度。</p><p><strong>写入侧监控:</strong></p><ul><li>每分钟 批量写入的请求数</li><li>每分钟 批量写入的日志数</li><li>每分钟 不同分区的写入日志数</li><li>每分钟 忽略的日志数(Schema 校验不通过)
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27207965120/4a7d/d9c6/43d7/396230093cd4f2e5a2f6f45fa0bf8363.png" class="img_ev3q"></li><li>数据消费的延时</li><li>数据批量转换耗时</li><li>数据批量转换条数
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27207977929/ca03/235f/f6ad/052ffea26bf69274158d7da4c08c531d.png" class="img_ev3q"></li><li>数据分区转换并写入 ClickHouse 耗时</li><li>ClickHouse 写入请求耗时
<img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27207991931/70c9/2b9c/ed2f/99cf455cbf0d5c155ca48bb1646d69d2.png" class="img_ev3q"></li></ul><p><strong>查询侧监控</strong>:</p><ul><li>每分钟总查询次数</li><li>每分钟平均查询耗时</li><li>慢查询 SQL 详情
<img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27208225232/e89a/eead/4021/d81fd0e8f671586b7576401debacd15c.png" class="img_ev3q"></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="45-存在的痛点">4.5 存在的痛点<a href="#45-存在的痛点" class="hash-link" aria-label="4.5 存在的痛点的直接链接" title="4.5 存在的痛点的直接链接">​</a></h3><p>ClickHouse 在 Corona 的性能分析场景满足了我们绝大多数的诉求，如果非要让笔者想一个痛点的话，那可能是缺少像 InfluxDB 一样的 CQ ( Continue Query) 能力。什么情况下需要 CQ 呢？</p><p>ClickHouse 虽然具有强大的实时在线分析能力，但是他的处理性能也是有资源开销的。在机器资源有限的前提下，如果需要做时间跨度大，数据量级超几百亿的分析，也是有相当大的资源开销和等待时间的。</p><p>举例来说，在 Corona 比较分析 App 版本性能走势场景时，由于 App 发版时间跨度大，每个版本仅存在一段时间的高峰流量期，如果需要客观地对比每个 App 的性能，需要让每个版本的样本量尽可能大，我们如果还是选择在线分析的话，就需要把 时间跨度拉到好几个月，此时数据分析的等待时间就会特别长。</p><p>为了解决等待耗时长的问题，我们还是转为离线分析的思路，在应用层，每日对 Top3 日活的版本做性能归档快照。在分析 App 版本走势时，使用归档快照数据做分析。</p><p>如果 ClickHouse 原生具备 InfluxDB 的 Continue Query 能力，可能实现起来会相对容易些。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="五-elasticsearch">五. ElasticSearch<a href="#五-elasticsearch" class="hash-link" aria-label="五. ElasticSearch的直接链接" title="五. ElasticSearch的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="51-简介">5.1 简介<a href="#51-简介" class="hash-link" aria-label="5.1 简介的直接链接" title="5.1 简介的直接链接">​</a></h3><p>Elasticsearch 是一款基于 Apache Lucene 的分布式搜索和分析引擎，用于全文检索、日志分析、数据可视化等场景。它支持实时搜索、数据聚合、自动化分片和复制等功能，并提供了 RESTful API 和丰富的插件生态系统。Elasticsearch 被广泛应用于企业级搜索和日志分析等领域。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="52-在-corona-中的应用场景">5.2 在 Corona 中的应用场景<a href="#52-在-corona-中的应用场景" class="hash-link" aria-label="5.2 在 Corona 中的应用场景的直接链接" title="5.2 在 Corona 中的应用场景的直接链接">​</a></h3><p>在设计 Corona 平台时，我们引入 ES 的主要目的是用于存储异常监控的原始日志，并借助 ES 的全文检索能力，提供丰富、灵活的日志搜索功能。</p><p>下图为 Corona 的搜索面板，在此处我们意图搜索包含 undefined 信息的错误日志。</p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27195122214/ecce/e54c/d851/cacd03354eaae9fa27a3777cb01a88f0.png" width="400" class="img_ev3q"><p>下图为 Corona 的搜索结果列表，展示了包含 undefined 错误信息的 Issue。</p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27195252659/b9d4/8b16/d67f/430607bd6805c276d19df601b0d7ff43.png" width="400" class="img_ev3q"><p>关于 ES 搜索的概念，在这篇文章中不作更多展开，感兴趣的读者可以查看笔者的<a href="https://kkdev163.github.io/blog/elasticsearch-basic/" target="_blank" rel="noopener noreferrer">这篇文章</a>。除了日志的搜索功能外，Corona 也希望为用户展示异常发生的时序趋势图。由于原始日志的存储我们已经使用了 ES 进行存储，在设计时序分析功能实现时，我们其实是有两条技术实现路线可供选择:</p><ol><li>将原始日志另写入一份至消息队列 -&gt; Flink 聚合 -&gt; InfluxDB</li><li>使用 ES 的聚合能力，基于原始日志直接做时序数据分析。</li></ol><p>考虑到架构的简洁、减少依赖等因素，并参考了 ES 与 InfluxDB 的性能对比文章后，我们最终选择了方案二。 以下是使用 ES 做的一些时序分析功能演示:</p><p>下图为应用整体的异常趋势图:
<img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27195565010/e546/0e4f/6ef9/256ae76ed1037ae0be842c3e05a899bb.png" class="img_ev3q"></p><p>下图为单条 issue 的异常趋势图:
<img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27195581099/6821/aa64/e406/c29529b8e3608cfeaeff0f6b137c900b.png" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="53-表结构设计及查询示例">5.3 表结构设计及查询示例<a href="#53-表结构设计及查询示例" class="hash-link" aria-label="5.3 表结构设计及查询示例的直接链接" title="5.3 表结构设计及查询示例的直接链接">​</a></h3><p>ES 在写入数据前，不要求建立表结构。ES 会根据写入的数据自动推断数据类型进行存储。但为了避免类型的错误推断导致后续查询功能不符合预期，建议是在写入数据前，对表结构进行约束。</p><p>ES 对表结构进行约束的方式是创建模板。模板中可包含索引匹配规则 (可理解为表名)，表中的数据结构类型。</p><p>下面我们创建一个演示的模板，模板中的索引包含了 5 个字段</p><ul><li>project_id: 应用 ID，类型为 long</li><li>issue_id: 聚合错误 ID, 类型为 long</li><li>os: 上报操作系统，类型为 keyword</li><li>ts: 上报时间，类型为 date</li><li>error_obj: 错误详情对象，JSON 类型，JSON 中包含 message 字段，message 为文本类型，支持分词检索。</li></ul><div class="language-JSON codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-JSON codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">PUT _template/template_web_demo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "indx_patterns": ["web_demo_*"],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "mappings": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_doc": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "project_id": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              "type": "long"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "issue_id": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              "type": "long"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "os": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              "type": "keyword"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "ts": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              "type": "date"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "error_obj": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              "properties": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 "message": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     "type": "text",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     "fields": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        "keyword": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            "type": "keyword",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            "ignore_above": 256</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以下是一些示例数据：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">project_id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">issue_id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">os</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"iphone"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">ts</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2023-04-27 15:00:00"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">error_obj</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">message</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot read properties of undefined (reading 'providerLog')"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">project_id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">issue_id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">os</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"android"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">ts</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2023-04-27 15:01:00"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">error_obj</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">message</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"e.forEach is not a function')"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查询示例: 查询项目 id 为 1 的所有 issue 的最近 7 天每日上报量走势</p><div class="language-JSON codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-JSON codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "query": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "bool": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "filter": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "bool": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "must": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            { // 指定查询的项目id 为 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              "term": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "project_id": 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            { // 指定查询时间范围 &gt;= 2023-04-21 00:00:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              "range": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "ts": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  "gte": 1682006400000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            { // 指定查询时间范围 &lt;= 2023-04-27 23:59:59</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              "range": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "ts": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  "lte": 1682611199000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "aggs": { // 聚合，按 issue_id 字段做聚合</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "issueId": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "terms": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "field": "issue_id"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "aggs": { // 子聚合，按时间1天粒度做聚合</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "series": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "date_histogram": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "field": "ts",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "interval": "1d",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "format": "yyyy-MM-dd HH:mm:ss",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "time_zone": "+08:00"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "size": 0, // 只统计聚合结果，不返回原文档</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对于首次接触 ES 的同学来看，这个查询条件看上去会比较地复杂。上面的查询如果用 InfluxDB SQL 的话其实就是:</p><div class="language-SQL codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-SQL codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SELECT COUNT()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM `web_demo`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WHERE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  project_id = 1 AND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  time&gt;=1682006400000 AND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  time &lt;=1682611199000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GROUP BY issue_id, time(1d);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="54-数据读写架构">5.4 数据读写架构<a href="#54-数据读写架构" class="hash-link" aria-label="5.4 数据读写架构的直接链接" title="5.4 数据读写架构的直接链接">​</a></h3><blockquote><p>本节我们只介绍 ES 在 Corona 时序数据场景下的应用层架构</p></blockquote><p><strong>1) 基于原始日志做时序分析</strong></p><p>Corona 平台的异常日志原始日志由异常日志清洗服务做预处理后批量写入 ES。可视化管理后台在后续可直接请求 ES 做时序数据分析。
<img loading="lazy" src="https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27201538834/5897/e416/6bb2/5282867cd6389055ddaf92e95df0bab2.png" class="img_ev3q"></p><p><strong>2) 基于聚合数据做时序分析</strong></p><p>在 Corona 的告警场景，考虑到查询聚合表会比查询原始表有更高的性能，并且为了方便追溯告警的历史走势，我们在应用层配置了定时任务做分钟级的数据聚合，告警任务在执行时，直接读取分钟级聚合表。</p><p><img loading="lazy" src="https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/27201542231/258d/21ab/a664/34ba5a29faff6ea0a4817507acaf6646.png" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="55-存在的痛点">5.5 存在的痛点<a href="#55-存在的痛点" class="hash-link" aria-label="5.5 存在的痛点的直接链接" title="5.5 存在的痛点的直接链接">​</a></h3><p>Corona 使用 ES 做时序分析的场景相对来说还比较有限。对于 ES 在时序分析下的性能，是否存在瓶颈，尚未有深入的探索。我们的痛点主要是集中在使用姿势上。</p><p>通过 5.3 节 的示例，读者不难发现，在时序分析场景，ES 查询的请求体的书写 和 理解 相对于 InfluxDB 来说，具有一定的复杂度。 如果我们的项目需要用到 ES 来做时序分析，建议是在应用层封装一些 Utils 工具类，协助做请求体生成 和 数据解析。NodeJS 环境下推荐基于 <a href="https://www.npmjs.com/package/bodybuilder" target="_blank" rel="noopener noreferrer">bodybuilder</a> 做上层的封装。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="六小结">六.小结<a href="#六小结" class="hash-link" aria-label="六.小结的直接链接" title="六.小结的直接链接">​</a></h2><p>本篇文章介绍了时序分析的基本概念，并结合 Corona 平台的应用场景，分别介绍了三款时序数据库的 基本概念 和 使用建议，下表是简要的总结，希望对读者有一些帮助和启发，限于笔者的个人水平，文中难免存在解释不到位或描述不准确的地方，欢迎读者留言讨论交流。</p><table><thead><tr><th>数据库</th><th>特点</th><th>痛点</th><th>适合 存储、分析 场景</th></tr></thead><tbody><tr><td>InfluxDB</td><td>使用便捷、部署低成本</td><td>官方仅开源单机版无高可用、内存敏感型</td><td>客户端侧预聚合后的性能日志、服务器侧的原始性能日志</td></tr><tr><td>ClickHouse</td><td>海量数据在线实时计算、列式存储压缩、使用便捷</td><td>部署规格高、无 CQ</td><td>客户端侧原始性能日志</td></tr><tr><td>ElasticSearch</td><td>具备强大的文本搜索功能</td><td>时序分析场景下的使用姿势较为复杂</td><td>具有搜索需求的文本型数据</td></tr></tbody></table>]]></content:encoded>
            <category>监控、ClickHouse、InfluxDB、ES</category>
        </item>
        <item>
            <title><![CDATA[Wechaty-puppet-padlocal 实现初探]]></title>
            <link>https://kkdev163.github.io/blog/inner-glance-of-padlocal</link>
            <guid>https://kkdev163.github.io/blog/inner-glance-of-padlocal</guid>
            <pubDate>Wed, 15 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[本文首发于 Wechaty 社区]]></description>
            <content:encoded><![CDATA[<blockquote><p>本文首发于 <a href="https://wechaty.js.org/2021/12/15/inner-glance-of-padlocal" target="_blank" rel="noopener noreferrer">Wechaty 社区</a></p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="引言">引言<a href="#引言" class="hash-link" aria-label="引言的直接链接" title="引言的直接链接">​</a></h2><p>笔者是 <a href="https://wechaty.js.org/" target="_blank" rel="noopener noreferrer">Wechaty</a> 和 <a href="https://wechaty.js.org/docs/puppet-providers/padlocal" target="_blank" rel="noopener noreferrer">whacty-puppet-padlocal</a> 的一名普通用户, 曾在 Wechaty 社区上发布了一篇博文<a href="https://wechaty.js.org/2021/05/02/wechaty-bible-chatbot/" target="_blank" rel="noopener noreferrer">《微信群机器人-读经助手》</a>。此次出于学习的目的，阅读了 Wechaty 社区上发布的 PadLocal <a href="https://wechaty.js.org/2020/10/12/puppet-padlocal-intro/" target="_blank" rel="noopener noreferrer">相关博文</a> 及 Github 上开源的 <a href="https://github.com/padlocal/wechaty-puppet-padlocal" target="_blank" rel="noopener noreferrer">wechaty-puppet-padlocal</a>、<a href="https://github.com/padlocal/padlocal-client-ts" target="_blank" rel="noopener noreferrer">padlocal-client-ts</a> 等仓库代码，对 whacty-puppet-padlocal 的实现做一次 简单、粗浅 的梳理，希望能够借此机会与广大开发者有所交流，帮助自己进一步学习 Wechaty 生态。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="心中的疑问">心中的疑问<a href="#心中的疑问" class="hash-link" aria-label="心中的疑问的直接链接" title="心中的疑问的直接链接">​</a></h2><p>在阅读 PadLocal 作者的<a href="https://wechaty.js.org/2020/10/12/puppet-padlocal-intro/" target="_blank" rel="noopener noreferrer">文章</a>中，作者给出了 PadLocal 的整体架构拓扑图:</p><p><img loading="lazy" alt="image" src="/assets/images/topological-graph-08c99dee543d96a5a3b1b0699413dc41.webp" width="926" height="444" class="img_ev3q"></p><p>作者在文中提到:</p><blockquote><p>我们利用了 GRPC 的双向通信机制，让 puppet 成为代理，将所有流量通过 puppet 转发给 WeChatServer。同时由 puppet 来维持和 WeChatServer 之间的长连接。</p></blockquote><p>在读到此处时，笔者产生了几个好奇的问题：</p><ul><li>PadLocal、PadLocalServer 在 Wechaty 整体架构中主要扮演什么角色？</li><li>有哪些类型的请求需要通过 grpc 的方式与 PadLocalServer 通信？</li><li>大体的扫码登录流程是怎么样的？</li><li>大体的消息收发流程是怎么样的？</li><li>到底有没有一个真实的 ipad 设备，在登录着微信账号？</li></ul><p>带着这几个问题，笔者阅读了<a href="https://github.com/padlocal/wechaty-puppet-padlocal" target="_blank" rel="noopener noreferrer">wechaty-puppet-padlocal</a>、<a href="https://github.com/padlocal/padlocal-client-ts" target="_blank" rel="noopener noreferrer">padlocal-client-ts</a> 等仓库代码。下文将为大家做简单、粗浅的解答。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="整体架构">整体架构<a href="#整体架构" class="hash-link" aria-label="整体架构的直接链接" title="整体架构的直接链接">​</a></h2><p><img loading="lazy" alt="整体架构" src="/assets/images/graph-728e3b884c0e9d5a387076e991f1156f.webp" width="827" height="544" class="img_ev3q"></p><p>我们从上往下看，在应用层我们的微信机器人直接与 Wechaty SDK 交互，在 Wechaty SDK 上调用方法，并监听一些事件。例如以下示例代码，我们在 Wechaty 实例上监听了 <code>scan</code>、<code>login</code>、<code>message</code> 等事件，并调用了 start() 方法。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Importing the Wechaty npm package</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Wechaty</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"wechaty"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Initializing the bot</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> bot </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Wechaty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"starter-bot"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Starting the bot</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"scan"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">qrcode</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> status</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Scan QR Code to login: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">status</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">\nhttps://wechaty.js.org/qrcode/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation function" style="color:#d73a49">encodeURIComponent</span><span class="token template-string interpolation punctuation" style="color:#393A34">(</span><span class="token template-string interpolation"></span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string interpolation">        qrcode</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string interpolation">      </span><span class="token template-string interpolation punctuation" style="color:#393A34">)</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"login"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">user</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">User </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">user</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c"> logged in</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"message"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">message</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Message: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">message</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>调用 start 方法后，我们分 方法调用 和 事件响应 两条链路来看整体的架构流水线。</p><p><strong>第一条从上往下的 方法调用:</strong></p><p><code>wechaty.start()</code> -&gt; <code>PuppetPadLocal.start()</code> -&gt; <code>client = PadLocalClient.create()</code> -&gt; <code>client.api.login({onQrCodeEvent，onLoginSuccess})</code> -&gt; <code>client.request(pb.LoginRequest)</code> -&gt; <code>grpc call</code> -&gt; <code>PadLocalServer</code></p><p>在 wechaty 的 start 流程中，通过底层依赖的层层调用，最终初始化请求，会变成一个 LoginRequest 通过 grpc 的方式发送至 PadLocalServer。</p><p><strong>第二条从下往上的 事件响应:</strong></p><p><code>_onServerMessage</code> -&gt; <code>onQrCodeEvent</code> -&gt; <code>PuppetPadLocal.emit('scan', {qrcode})</code> -&gt; <code>wechaty.emit('scan')</code> -&gt; <code>QRCode</code></p><p>grpcClient 在接收到 PadLocalServer 的响应后，通过回调 及 事件订阅的方式，向上层逐级抛出 scan 事件，我们的应用层就拿到了登录二维码。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="完整的登录流程">完整的登录流程<a href="#完整的登录流程" class="hash-link" aria-label="完整的登录流程的直接链接" title="完整的登录流程的直接链接">​</a></h2><p>以上的流程介绍中，我们提到通过 <code>wechaty.start</code> 的方法调用 及 <code>wechaty.on('scan')</code> 方法监听，可以拿到了一个 QRCode，我们使用手机扫码即可完成登录。</p><p>我们只发了一个 <code>LoginRequest</code> 的请求，响应是拿到的是一个 二维码。一个请求一个响应，理论上一次方法调用就结束了，那上层的 <code>login</code> 的事件，又是通过什么机制触发的呢？</p><p>答案应该就是 gRPC, 笔者没有使用过 gRPC, 但在 PadLocal 作者的文章中，他提到 gRPC 具备双向通信机制，再结合这几处的源码</p><ul><li><a href="https://github.com/padlocal/padlocal-client-ts/blob/7ba679d78d13aeacb67969f0d817dbabf64f9c36/src/PadLocalClientApi.ts#L24-L54" target="_blank" rel="noopener noreferrer">PadLocalClientApi.login</a></li><li><a href="https://github.com/padlocal/padlocal-client-ts/blob/7ba679d78d13aeacb67969f0d817dbabf64f9c36/src/Request.ts#L233" target="_blank" rel="noopener noreferrer">Request.<!-- -->_<!-- -->onServerMessage</a></li><li><a href="https://github.com/padlocal/padlocal-client-ts/blob/7ba679d78d13aeacb67969f0d817dbabf64f9c36/src/Request.ts#L214" target="_blank" rel="noopener noreferrer">Request.<!-- -->_<!-- -->completePendingRequest</a></li></ul><p>笔者大胆猜测: 在发起 LoginRequest 的 gRPC 请求后，PadLocal 服务端会根据登录状态，持续向 Client 端响应消息，触发 Client 中的 登录相关的几个事件回调如 <code>onQrCodeEvent</code>、<code>onLoginStart</code>、
<code>onLoginSuccess</code>，并会控制 Client 端 与 Wechat Server 完成长连接的建立。等到这些初始化都完成后，才会通过 gRPC 响应头中的 ack 字段，来结束这次 LoginRequest 的 gRPC 请求。</p><p>由于发起 LoginRequest 后，可能需要做长时间等待(如等待用户扫码)、并控制 Client 端与 Wechat Server 建立长连接，所以这个 gRPC 的超时等待时间也非常的长，有 10 分钟之久。</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 10 min timeout</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> request </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">createRequest</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  requestTimeout</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">60</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>用一张图来简要示意下，完整的 LoginRequest gRPC 调用流程:</p><p><img loading="lazy" alt="image" src="/assets/images/login-c0225ecd154d796ef52d949dff82a8f7.webp" width="1800" height="741" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="消息发送">消息发送<a href="#消息发送" class="hash-link" aria-label="消息发送的直接链接" title="消息发送的直接链接">​</a></h2><p>在通过 Wechaty SDK 发送文字消息时，如上述的 <code>wechat.start()</code> 调用流程一样，会经过以下层级调用发送至 PadLocalServer</p><p><code>contact.say('text message')</code> -&gt; <code>PuppetPadLocal.messageSendText(toUserName,'text message')</code> -&gt; <code>client.api.sendTextMessage(toUserName,'text message')</code> -&gt; <code>client.request(pb.SendTextMessageRequest)</code> -&gt; <code>grpc call</code> -&gt; <code>PadLocalServer</code></p><p>PadLocalServer 端应该会根据 Client 的请求类型 SendTextMessageRequest， 在 gRPC 的响应里，指示 Client 需要通过 长连接将 textMessage 发送给 WechatyServer。</p><p>而所有通过长连接发送给 wechatyServer 的数据，都需要再一次 通过 gRPC 将请求内容进行包装(可能是用破解的微信加密算法进行处理)。再将包装后的数据，传输给 wechatyServer。</p><p>见以下示意图:</p><p><img loading="lazy" alt="消息发送示意图" src="/assets/images/send-msg-899846ecefecce6501bcea8b2a25b0d4.webp" width="956" height="574" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="消息推送">消息推送<a href="#消息推送" class="hash-link" aria-label="消息推送的直接链接" title="消息推送的直接链接">​</a></h3><p>由于 Client 通过长连接与 WechatyServer 进行连接，微信的消息，会直接到达 Client 端，但 Client 端需要通过 gRPC 请求，将消息的内容做 unpack 处理(可能是用解密算法)。然后根据消息的类型，emit 到上层中，完成消息的接收。</p><p><img loading="lazy" alt="消息推送示意图" src="/assets/images/receive-msg-7e92130e5db53c908422ea9f4170b608.webp" width="802" height="660" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题解答">问题解答<a href="#问题解答" class="hash-link" aria-label="问题解答的直接链接" title="问题解答的直接链接">​</a></h2><p>最后我们来看下一开始提到的几个问题:</p><ul><li>PadLocal、PadLocalServer 在 Wechaty 整体架构中主要扮演什么角色？</li><li>有哪些类型的请求需要通过 grpc 的方式与 PadLocalServer 通信？</li><li>到底有没有一个真实的 ipad 设备，在登录着微信账号？</li></ul><blockquote><p>PadLocal、PadLocalServer 在 Wechaty 整体架构中主要扮演什么角色？</p></blockquote><p>PadLocal 在整体架构中扮演一个 微信 iPad 端代理的角色，他会与 Wechat Server 建立长连接，进行收发消息操作。但 Wechaty SDK 在 PadLocal 上的所有主动方法调用，都需要先 通过 gRPC 的方式，请求到 PadLocalServer， 在收到 PadLocalServer 的响应指示后， PadLocal 才知道如何进行后续的操作处理(通过 长/短 连接，或是 HTTP 请求 微信服务端)。并且所有的 消息的发送、接收 的加解密处理，都需要通过 PadLocalServer 进行。</p><blockquote><p>有哪些类型的请求需要通过 gRPC 的方式与 PadLocalServer 通信？</p></blockquote><p>Wechaty SDK 上的所有主动方法调用，都会变成 client.api 的方法调用，最后变成 gRPC 请求到 PadLocalServer。再根据 gRPC 的响应指示，与 Wechat Server 进行交互。</p><blockquote><p>到底有没有一个真实的 ipad 设备，在登录着微信账号？</p></blockquote><p>其实笔者通过粗浅的学习，也还不能确定 PadLocalServer 后面是否连接着真实的 ipad 设备，笔者只能根据 PadLocal 作者的文章 及 设备成本 等猜测，PadLocal 作者应该是完全破解了 微信 ipad 端 API，然后模拟出了一个 ipad 设备。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>本篇文章简单、粗浅地梳理了 PadLocal 的登录、消息收发流程。PadLocal 中的许多实现，笔者没有亲自实践过，只能根据看到的源代码进行推测，希望能借着这篇文章与感兴趣的开发者有所交流，并期待社区中有更多 PadLocal 相关的内部原理性文章产出，帮助我们学习 Wechaty 生态。</p>]]></content:encoded>
            <category>wechaty、padlocal、typescript</category>
        </item>
        <item>
            <title><![CDATA[Wechaty-微信群机器人-读经助手]]></title>
            <link>https://kkdev163.github.io/blog/wechaty-bible-robot</link>
            <guid>https://kkdev163.github.io/blog/wechaty-bible-robot</guid>
            <pubDate>Sun, 02 May 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[本文首发于 Wechaty 社区]]></description>
            <content:encoded><![CDATA[<blockquote><p>本文首发于 <a href="https://wechaty.js.org/2021/05/02/wechaty-bible-chatbot/" target="_blank" rel="noopener noreferrer">Wechaty 社区</a></p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="一前言">一、前言<a href="#一前言" class="hash-link" aria-label="一、前言的直接链接" title="一、前言的直接链接">​</a></h2><p>笔者将从 开发意图、产品功能特性、技术方案、心得体会 等方面回顾总结 微信群机器人-读经助手 的产品开发历程，希望对其他开发者有所帮助。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="二开发意图">二、开发意图<a href="#二开发意图" class="hash-link" aria-label="二、开发意图的直接链接" title="二、开发意图的直接链接">​</a></h2><p>笔者是一名基督徒微信群的成员，群里需要人工每天定时发送「文章」链接，并统计群成员「已读」人数。最早我们采取的方案是人工定时发送，群成员到 在线协同工具 如「石墨文档」手动填写「已读」。该方案虽然节省了统计人数的工作量，但依然有几个缺点：</p><ul><li>群成员年龄分布广，包含 60、70 岁成员，让他们跳转至第三方应用手动填写，操作成本高，导致打卡率低。</li><li>在群里直接文字打卡，可激励其他成员，而跳转至第三方应用打卡，就减弱了这个互动性。</li><li>每天人工定时发送，长期来看对发送人员是个不小的挑战。</li></ul><p>所以希望能够开发一个 微信机器人-读经助手 帮助实现如下功能：</p><ul><li>定时在微信群中发送文章链接</li><li>基于群成员的聊天信息(已读、完成) 等，自动进行统计打卡</li></ul><p>感谢 <a href="https://wechaty.js.org/" target="_blank" rel="noopener noreferrer">Wechaty</a> ，基于 Wechaty SDK，笔者通过一个晚上，就实现了 读经助手 的上述核心诉求，从此解放双手。目前 读经助手 在投入到 6 个微信群中使用，最长服务时长达 2 个月，服务人数 200+。(不敢主动推广，原因后面会讲)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="三产品功能特性">三、产品功能特性<a href="#三产品功能特性" class="hash-link" aria-label="三、产品功能特性的直接链接" title="三、产品功能特性的直接链接">​</a></h2><p>核心功能仅用了一个晚上就实现了，但笔者大概花了 一个月(代码量 3000 行左右 ts 代码) 的时间来丰富 读经助手 的周边功能。完整功能大致分为以下几类：</p><ul><li>定时文章推送 (支持了多种基督教刊物)</li><li>群成员打卡 (基于群成员聊天，统计打卡人数、汇总生成 excel 表格)</li><li>获取文章链接 (获取多种基督教刊物的在线链接)</li><li>搜索文章内容 (搜索基督教刊物的内容)</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="功能简介">功能简介<a href="#功能简介" class="hash-link" aria-label="功能简介的直接链接" title="功能简介的直接链接">​</a></h3><p><img loading="lazy" alt="image" src="/assets/images/03-01-19c3ebf7b7e83a24c23b8ea3166eca43.webp" width="1168" height="288" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="更多功能">更多功能<a href="#更多功能" class="hash-link" aria-label="更多功能的直接链接" title="更多功能的直接链接">​</a></h3><p><img loading="lazy" alt="image" src="/assets/images/03-02-2dd35c589304371a331b5bdd5af8e124.webp" width="1874" height="622" class="img_ev3q"></p><p><a target="_blank" href="/assets/files/03-03-2a7fbe212f0b20f09dc75d5f97819a7f.webp">更多功能长图</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="文章推送">文章推送<a href="#文章推送" class="hash-link" aria-label="文章推送的直接链接" title="文章推送的直接链接">​</a></h3><p><img loading="lazy" alt="image" src="/assets/images/03-04-ff7ea506c363ee645e6e611c446fbc2e.webp" width="1628" height="520" class="img_ev3q"></p><p><img loading="lazy" alt="image" src="/assets/images/03-05-3d083f83baf514250f7a35cce48bad3c.webp" width="1000" height="547" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="打卡统计">打卡统计<a href="#打卡统计" class="hash-link" aria-label="打卡统计的直接链接" title="打卡统计的直接链接">​</a></h3><p><img loading="lazy" alt="image" src="/assets/images/03-06-0de8c007cc291e9bc8aa42d4b1e1aa7f.webp" width="1706" height="1104" class="img_ev3q"></p><p><img loading="lazy" alt="image" src="/assets/images/03-07-654488a1a01420bc77e733f367757e5c.webp" width="1220" height="234" class="img_ev3q"></p><p><img loading="lazy" alt="image" src="/assets/images/03-08-55e745d6a926aa837bd2f2819385a0f5.webp" width="1302" height="452" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="搜文章内容">搜文章内容<a href="#搜文章内容" class="hash-link" aria-label="搜文章内容的直接链接" title="搜文章内容的直接链接">​</a></h3><p><img loading="lazy" alt="image" src="/assets/images/03-09-9837c6fc9cca9db1b027e601a6ccee32.webp" width="1444" height="672" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="四技术实现">四、技术实现<a href="#四技术实现" class="hash-link" aria-label="四、技术实现的直接链接" title="四、技术实现的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="wechaty">Wechaty<a href="#wechaty" class="hash-link" aria-label="Wechaty的直接链接" title="Wechaty的直接链接">​</a></h3><p>目前来看，上手成本最低的应该是只用 <a href="https://wechaty.js.org/docs/puppet-services/" target="_blank" rel="noopener noreferrer">puppet-services</a>，我使用的 token 提供商是 <a href="https://wechaty.js.org/docs/puppet-services/paimon" target="_blank" rel="noopener noreferrer">Paimon</a>, 注册手机号，即可获取 7 天 token。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="部署方案">部署方案<a href="#部署方案" class="hash-link" aria-label="部署方案的直接链接" title="部署方案的直接链接">​</a></h3><p>一共经历了如下几个部署方案：</p><ul><li><ol><li>闲置电脑部署 wechaty 应用 +  数据库(AWS dynamodb 香港节点)，使用 dynamodb 是因为这是亚马逊云的免费数据库产品，想白嫖。</li></ol></li><li><ol start="2"><li> 阿里云轻量应用服务器(1C 2G 40G-SSD 杭州节点) 部署 wechaty 应用 +  数据库(AWS dynamodb 香港节点)， 阿里云服务器是 98 元每年(新用户活动价)，可连续买三年。但阿里云杭州节点 连 亚马逊香港节点，延迟有时候会有 几十秒。尝试过阿里云香港节点，数据库请求是快了，但发送给 puppet-services 的请求有时会有几秒的延迟。</li></ol></li><li><ol start="3"><li>阿里云部署 wechaty 应用 + 数据库换成服务器自带的 mongodb。 这样访问 puppet-services、数据库都非常快。 由于两种数据库都是文档型，迁移的成本还不算太高，大概花了一天时间做数据库迁移+适配层代码。</li></ol></li></ul><p>由于需要做内容搜索，所以也在阿里云服务器上部署了 ElasticSearch。阿里云 98 一年真香。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="实现思路">实现思路<a href="#实现思路" class="hash-link" aria-label="实现思路的直接链接" title="实现思路的直接链接">​</a></h3><p>代码开源在该<a href="https://github.com/kkdev163/wechaty-bible-robot" target="_blank" rel="noopener noreferrer">仓库</a>，感兴趣的可以参考下，本节主要介绍下目录结构</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">├── README.md</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── deploy.sh  部署脚本</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── dev.sh  开发环境脚本</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── ecosystem.config.js pm2进程管理配置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── nodemon.json 本地开发配置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── package-lock.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── package.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── prod.sh 生产环境脚本</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── index.ts  wechaty 主入口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; └── src</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     ├── actions  actions 命令的实现</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── _7cthSchedule.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── bibleSchedule.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── commit.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── index.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── pushSchedule.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── remind.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── search.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── smdjSchedule.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; └── static.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     ├── bible  圣经相关的资源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── _7cth.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── plan.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── shareRes.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; └── smdj.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     ├── constants.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     ├── controller 放开 http 服务的控制器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── index.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── proxy.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── search.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── setting.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; └── utils.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     ├── ddb 数据库相关</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── commands</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── index.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── mongoDb.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── schema.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── script</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; └── syncModels.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     ├── handleMessage.ts 消息处理</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     ├── http.ts http 服务器入口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     ├── interface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; └── index.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     ├── schedule.ts 定时任务入口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     ├── </span><span class="token function" style="color:#d73a49">service</span><span class="token plain"> http 服务对应的 </span><span class="token function" style="color:#d73a49">service</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── esClient.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── search.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     │&nbsp;&nbsp; └── setting.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;     └── util 工具函数库</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── bibleData.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── bibleUtils.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── canvas.html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── devUtils.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── drawBible.html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── drawUtils.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── formatUtils.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── index.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── smdj-es-doc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── smdjStats</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── smdjUtils.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── songUtils.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         ├── timeUtils.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp;         └── wxUtils.ts</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="五心得体会">五、心得体会<a href="#五心得体会" class="hash-link" aria-label="五、心得体会的直接链接" title="五、心得体会的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一次为自己写代码">第一次为自己写代码<a href="#第一次为自己写代码" class="hash-link" aria-label="第一次为自己写代码的直接链接" title="第一次为自己写代码的直接链接">​</a></h3><p> 笔者之前大部分写的代码都是为了学习、工作(赚钱)。这次是 为了解放自己的双手、便利身边朋友 而写代码，心态从赚钱变成了奉献。发现自己又重新找回了，写程序的激情 和 热情，在开发读经机器人期间，有好几次通宵的经历，而且功能上线后，及时的反馈 和自我满足感是很让人愉悦的。</p><p>这也让我意识到，写代码不仅仅是一种工作，而确确实实是一项实用的生活技能、特长。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="微信侧风险">微信侧风险<a href="#微信侧风险" class="hash-link" aria-label="微信侧风险的直接链接" title="微信侧风险的直接链接">​</a></h3><p>开发阶段，有次把机器人号，从测试群中主动踢出，发现 Provider Service 抛出了一个 Error，为了复现这个异常，我重复多次把这个号从测试群中踢出。然后过了一段时间，就收到了 微信风控通知，提示该号被 多人投诉、有骚扰用户的行为。 所以大家尽量不要将 机器人踢出群，最好采用主动退出的方式，以免被微信风控。</p><p>换了新的微信号后，大概服务了 2 个月不到，发现被微信主动踢下线了，再次登录提示使用了 微信外挂、非官方客户端或模拟器。不清楚是, provider service 的方案，被大批检测出，还是仅仅是 笔者的微信号，被投诉导致。。
<img loading="lazy" alt="image" src="/assets/images/04-01-a2c8b8d2f3a5d0efacb7135bc7b23311.webp" width="1080" height="2412" class="img_ev3q"></p><p>笔者开发机器人的初衷是希望解放人力，其实越多的微信群使用(免费使用)，对我来说，开发机器人的价值越高。但由于存在微信封号风险，是目前笔者不敢主动推广，仅靠群成员的口口相传。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-8-原则">2 8 原则<a href="#2-8-原则" class="hash-link" aria-label="2 8 原则的直接链接" title="2 8 原则的直接链接">​</a></h3><p>如上文提到的核心功能，笔者 1 个晚上就实现了，剩下的时间都在丰富七七八八的周边功能。但说实话，这些周边功能，都是我个人在使用，频率非常低，但却占据了我整体开发的 80% 以上时间。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="交互友好性">交互友好性<a href="#交互友好性" class="hash-link" aria-label="交互友好性的直接链接" title="交互友好性的直接链接">​</a></h3><p>由于读经机器人有部分功能是需要输出长段的文字，考虑到阅读的友好性，防止老年机大段文字刷屏，读经机器人使用了 node-canvas 渲染引擎，并实现了简单的文字排版，将大段文字通过图片的方式发送给用户。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="便利性与通用性">便利性与通用性<a href="#便利性与通用性" class="hash-link" aria-label="便利性与通用性的直接链接" title="便利性与通用性的直接链接">​</a></h3><p>为了使功能更加通用性，部分功能的开发，常常是站在程序员的视角出发，提供出多个参数化的配置，但这却加大了使用者的认知成本。比如 读经助手 提供了如下命令</p><p><code>@读经助手  创建读经计划 创世记1~玛拉基书4 90天</code></p><p>该命令中包含了如下几个参数「起始书卷、起始章节、结束书卷、结束章节、阅读天数」，更便利的做法是包装成如下指令</p><p><code>@读经助手 创建读经计划 旧约 90天</code></p><p>另外笔者还尝试过开发了一个 H5 页面，当群成员输入</p><p><code>@读经助手 群设置</code></p><p>返回该群设置的 H5 页面链接，这样通过 H5 页面的方式进行配置，虽然可以方便使用者。但同时也引入了安全性问题：任意一名群成员都能打开 H5 页面，他可以随意 删除、改变 群配置。如果要防止该问题，就需要额外开发 登录、鉴权。相比而言，使用群聊输入命令，是处于 全群监督下，不会有人进行乱操作。。所以虽然开发了 H5 设置页面，但没有对用户开发。</p>]]></content:encoded>
            <category>wechaty、robot</category>
        </item>
        <item>
            <title><![CDATA[ES(ElasticSearch) 搜索基本概念简介]]></title>
            <link>https://kkdev163.github.io/blog/elasticsearch-basic</link>
            <guid>https://kkdev163.github.io/blog/elasticsearch-basic</guid>
            <pubDate>Thu, 02 Apr 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[本篇文章介绍了 ES(ElasticSearch) 搜索相关的基本概念]]></description>
            <content:encoded><![CDATA[<p>本篇文章介绍了 ES(ElasticSearch) 搜索相关的基本概念</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="es-的存储类型">ES 的存储类型<a href="#es-的存储类型" class="hash-link" aria-label="ES 的存储类型的直接链接" title="ES 的存储类型的直接链接">​</a></h3><p>ES 的存储类型大致分为两类</p><ul><li>结构化数据 类型为 keyword、date、long、boolean 等</li><li>文本数据 类型为 text</li></ul><p>存储索引建立规则：</p><ul><li>ES 在存储结构化数据类型时，会将数据作为一个整体建立倒排索引。</li><li>ES 在存储文本数据类型时，会将文本先进行分词处理，然后按各个单独的词项建立倒排索引。</li></ul><p>举例来说：</p><p>假设索引字段的定义如下：</p><table><thead><tr><th>字段名</th><th>字段类型</th></tr></thead><tbody><tr><td>appName</td><td>keyword</td></tr><tr><td>description</td><td>text</td></tr></tbody></table><p>当插入以下两条数据时</p><table><thead><tr><th>id</th><th>appName</th><th>description</th></tr></thead><tbody><tr><td>1</td><td>App Store</td><td>App Store is Awesome</td></tr><tr><td>2</td><td>Apple Store</td><td>Store Sell Apple Pie</td></tr></tbody></table><p>ES 会为 appName 字段建立如下的倒排索引：</p><table><thead><tr><th>索引</th><th>文档 id</th></tr></thead><tbody><tr><td>App Store</td><td>1</td></tr><tr><td>Apple Store</td><td>2</td></tr></tbody></table><p>ES 会为 description 字段建立如下的倒排索引：</p><table><thead><tr><th>索引</th><th>文档 id</th></tr></thead><tbody><tr><td>app</td><td>1</td></tr><tr><td>store</td><td>1, 2</td></tr><tr><td>awesome</td><td>1</td></tr><tr><td>sell</td><td>2</td></tr><tr><td>apple</td><td>2</td></tr><tr><td>pie</td><td>2</td></tr></tbody></table><p>注：通用分词器会将词项转为小写</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="es-的搜索">ES 的搜索<a href="#es-的搜索" class="hash-link" aria-label="ES 的搜索的直接链接" title="ES 的搜索的直接链接">​</a></h3><p>ES 的搜索分为两大类</p><ul><li>基于词项的搜索(Term 搜索)</li><li>基于全文的搜索</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="基于词项的搜索">基于词项的搜索<a href="#基于词项的搜索" class="hash-link" aria-label="基于词项的搜索的直接链接" title="基于词项的搜索的直接链接">​</a></h4><p>在进行基于词项的搜索，搜索词 与 文档字段需完全匹配。</p><p>ES 提供了五种基于词项的搜索方法</p><ul><li>term</li><li>range</li><li>exists</li><li>prefix</li><li>wildcard</li></ul><h5 class="anchor anchorWithStickyNavbar_LWe7" id="demo-举例">DEMO 举例<a href="#demo-举例" class="hash-link" aria-label="DEMO 举例的直接链接" title="DEMO 举例的直接链接">​</a></h5><table><thead><tr><th>id</th><th>appName</th><th>description</th></tr></thead><tbody><tr><td>1</td><td>App Store</td><td>App Store is Awesome</td></tr><tr><td>2</td><td>Apple Store</td><td>Store Sell Apple Pie</td></tr></tbody></table><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "query": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "term": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "appName": "App Store" // 可搜索到</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // "appName": "App"  // 无法搜索到</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="基于全文的搜索">基于全文的搜索<a href="#基于全文的搜索" class="hash-link" aria-label="基于全文的搜索的直接链接" title="基于全文的搜索的直接链接">​</a></h4><p>ES 主要提供了两种基于全文的搜索方法</p><ul><li>match</li><li>match_phrase</li></ul><p>在进行 match 搜索时，ES 会先将查询字符串进行分词，然后将每个词项与倒排索引进行匹配，任意一个词项匹配到，即搜索成功。</p><p>在进行 match_phrase 搜索时，ES 将查询字符串看作一个整体，只有文档中包含该短语字符串时，才搜索成功。</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="demo">DEMO<a href="#demo" class="hash-link" aria-label="DEMO的直接链接" title="DEMO的直接链接">​</a></h5><table><thead><tr><th>id</th><th>appName</th><th>description</th></tr></thead><tbody><tr><td>1</td><td>App Store</td><td>App Store is Awesome</td></tr><tr><td>2</td><td>Apple Store</td><td>Store Sell Apple Pie</td></tr></tbody></table><p>ES 会为 description 字段建立如下的倒排索引：</p><table><thead><tr><th>索引</th><th>文档 id</th></tr></thead><tbody><tr><td>app</td><td>1</td></tr><tr><td>store</td><td>1, 2</td></tr><tr><td>awesome</td><td>1</td></tr><tr><td>sell</td><td>2</td></tr><tr><td>apple</td><td>2</td></tr><tr><td>pie</td><td>2</td></tr></tbody></table><h6 class="anchor anchorWithStickyNavbar_LWe7" id="match-举例">match 举例<a href="#match-举例" class="hash-link" aria-label="match 举例的直接链接" title="match 举例的直接链接">​</a></h6><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "query": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "match": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "description": "App" // 可以搜到文档1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          //"description": "App Store"  // 可以搜索到文档1，2 (会先将App Store分词, 通过 Store 搜到了文档2)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          //"description": "App Awesome"  // 可以搜索到文档1 (还是进行了分词)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="match_phrase-举例">match_phrase 举例<a href="#match_phrase-举例" class="hash-link" aria-label="match_phrase 举例的直接链接" title="match_phrase 举例的直接链接">​</a></h5><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "query": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "match_phrase": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "description": "App" // 搜到文档1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          //"description": "App Store"  // 搜索文档1 (App Store是一个整体)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          //"description": "App Awesome"  // 无法查到 (App Awesome是一个整体)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="复合查询">复合查询<a href="#复合查询" class="hash-link" aria-label="复合查询的直接链接" title="复合查询的直接链接">​</a></h3><p>以上为单条件查询，但通常业务上需要基于多个条件进行查询，ES 提供了 bool 复合查询，该查询可以包含 4 个查询字句，分别是</p><ul><li>must 必须全部符合该条件。贡献算分(算分可以简单理解为搜索的匹配度)</li><li>should 符合条件之一即可。 贡献算分</li><li>must_not 必须不符合该条件。 不贡献算分，有缓存优化</li><li>filter 必须符合该条件。不贡献算分，有缓存优化</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "query": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "bool": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "must": [{  // 复合查询子句</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "term": {  // 基于词项搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    "appName": "App Store"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }, {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "range": { // 基于词项的范围搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    "time": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        "lgt": "2019-01-01"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }, {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "wildcard": { // 基于词项的通配符搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    "appName": "* Store"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }, {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "match": { // 基于全文的 match 搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    "description": "App Store"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }, {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "match_phrase": { // 基于全文的 match_phrase 搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    "description": "App Store"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "should": [{  // 复合查询子句</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "must_not": [{ // 复合查询子句</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "filter": [{ // 复合查询子句</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>一般情况下，在不需要算分的场景下，建议使用 filter 和 must_not, 因为不需要进行算分，ES 会有缓存优化。</p><p>另外每一个查询字句，可以继续嵌套 bool 查询。示意如下:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "query": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "bool": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "must": [{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "bool": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    "must":{...},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    "should": {...},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>由于复合查询的 body 构造较为繁复，我们可以使用 <a href="https://github.com/danpaz/bodybuilder" target="_blank" rel="noopener noreferrer">bodybuilder</a> 来简化这一过程。</p><p>示意如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var body = bodybuilder().query('match', 'message', 'this is a test').build()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// body == {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//   query: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//     match: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//       message: 'this is a test'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//     }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//   }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>详细<a href="https://bodybuilder.js.org/docs/" target="_blank" rel="noopener noreferrer">API 文档</a></p>]]></content:encoded>
            <category>搜索</category>
            <category>ES</category>
        </item>
        <item>
            <title><![CDATA[Lighthous 测试内幕]]></title>
            <link>https://kkdev163.github.io/blog/lighthouse</link>
            <guid>https://kkdev163.github.io/blog/lighthouse</guid>
            <pubDate>Tue, 12 Nov 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[前言]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a href="#前言" class="hash-link" aria-label="前言的直接链接" title="前言的直接链接">​</a></h2><p>云音乐前端性能监控平台，底层使用了 Lighthouse 进行审计评分，在实践过程中我们积累了一些 Lighthouse 内部实现的研究经验，希望通过这篇文章可以分享给各位读者。</p><p>本篇文章基于 Lighthouse 5.2.0 版本，介绍了 Lighthouse 的测试流程、架构模块实现、性能指标的计算等。通过这篇文章，读者可以了解到 Lighthouse 是如何做自动化测试的、如何在 Lighthouse 的框架上自定义一些审计项、关键的性能指标是如何模拟计算的。</p><p>本篇文章会按以下四个部分展开：</p><ul><li>Lighthouse 简介</li><li>Lighthouse 测试流程</li><li>Lighthouse 模块实现</li><li>Lighthouse 性能指标计算</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lighthouse-简介">Lighthouse 简介<a href="#lighthouse-简介" class="hash-link" aria-label="Lighthouse 简介的直接链接" title="Lighthouse 简介的直接链接">​</a></h2><p>Lighthouse 是一个开源的自动化工具，用于改进网络应用的质量。只要为 Lighthouse 提供一个需要审查的网址，它将针对此页面运行一连串的测试，然后生成一个有关页面性能的报告。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lighthouse-使用方式">Lighthouse 使用方式<a href="#lighthouse-使用方式" class="hash-link" aria-label="Lighthouse 使用方式的直接链接" title="Lighthouse 使用方式的直接链接">​</a></h3><p>目前官方提供了 4 种使用方式：</p><ul><li><a href="https://github.com/GoogleChrome/lighthouse#using-lighthouse-in-chrome-devtools" target="_blank" rel="noopener noreferrer">Chrome 开发者工具（DevTools）</a></li><li><a href="https://github.com/GoogleChrome/lighthouse#using-the-chrome-extension" target="_blank" rel="noopener noreferrer">Chrome 扩展</a></li><li><a href="https://github.com/GoogleChrome/lighthouse#using-the-node-cli" target="_blank" rel="noopener noreferrer">Node CLI</a></li><li><a href="https://github.com/GoogleChrome/lighthouse#using-the-node-module" target="_blank" rel="noopener noreferrer">Node Module</a></li></ul><p>以 Chrome 开发者工具为例，在 Audits 面板下，用户可以配置测试平台、测试类目、限速方式等，可以方便快捷地发起一次测试。</p><p><img loading="lazy" src="https://p1.music.126.net/-zIauX-4uD9ZOETz8OGxaQ==/109951164295464779.png" alt="image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lighthouse-测试报告">Lighthouse 测试报告<a href="#lighthouse-测试报告" class="hash-link" aria-label="Lighthouse 测试报告的直接链接" title="Lighthouse 测试报告的直接链接">​</a></h3><p>测试结束后，默认会生成 HTML 格式的报告，如下图所示，在报告中涵盖了 5 大类别（categories）的测试评分：</p><p><img loading="lazy" src="https://p1.music.126.net/aT_f3Y0FFCaR78J39Y3hfA==/109951164463170217.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>每个类别都包含一系列的审计项（audit），针对审计项的运行结果，Lighthouse 会给出特定的优化建议与诊断结果帮助开发者有针对性地进行优化。</p><p>本节简要介绍了 Lighthouse 的使用方式与测试报告组成，下一节将介绍 Lighthouse 的测试流程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lighthouse-测试流程">Lighthouse 测试流程<a href="#lighthouse-测试流程" class="hash-link" aria-label="Lighthouse 测试流程的直接链接" title="Lighthouse 测试流程的直接链接">​</a></h2><p>我们以 Node CLI 的方式进行测试，分析 Lighthouse 的测试流程。</p><p>参考<a href="https://github.com/GoogleChrome/lighthouse#using-the-node-cli" target="_blank" rel="noopener noreferrer">官方文档</a>，安装好 CLI 后，输入如下命令，可以进行一次测试</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">lighthouse --only-categories</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">performance https://google.com</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><em>注：以上命令只进行 performance 类别测试。</em></p><p>在 CLI 中会输出测试过程中的日志，截图显示如下，在日志中，可以看出测试大致分为如下几个阶段：</p><p><img loading="lazy" src="https://p1.music.126.net/mqu093845jHPdnHDwxrfgg==/109951164463501007.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>通过输出的日志，可以画出 Lighthouse 的测试流程图：</p><p><img loading="lazy" src="https://p1.music.126.net/Wka60Xl1kip0rBD8bia5lg==/109951164295505995.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><ol><li>Lighthouse 与浏览器建立连接。</li><li>测试的初始化配置与加载待测试页面。</li><li>在页面加载过程中，运行一系列的采集器（gatherers），每个采集器都会收集自己的目标信息，并生成中间产物（artifacts）。</li><li>运行一系列的审计项（audits），每个审计项都会从中间产物（artifacts）中获取所需的数据，计算出各自的评分。</li><li>基于审计项的评分计算出大类的评分，汇总生成报告。</li></ol><p>本节基于 Lighthouse 的测试日志，介绍了 Lighthouse 的测试流程，下节将介绍流程中的模块实现。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lighthouse-模块实现">Lighthouse 模块实现<a href="#lighthouse-模块实现" class="hash-link" aria-label="Lighthouse 模块实现的直接链接" title="Lighthouse 模块实现的直接链接">​</a></h2><p>初步了解了基本的测试流程后，我们再看下官方给出的 <a href="https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md" target="_blank" rel="noopener noreferrer">Lighthouse 架构图</a>：</p><p><img loading="lazy" src="https://p1.music.126.net/-A6wsG5KoXXe3-OS2XVeuQ==/109951164295515799.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>这张图中体现了测试的主要流程，从中也可以圈出 4 个主要模块，下文会对这几个模块做逐个讲解。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="driver-模块">Driver 模块<a href="#driver-模块" class="hash-link" aria-label="Driver 模块的直接链接" title="Driver 模块的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="双向通信与-devtools-协议">双向通信与 DevTools 协议<a href="#双向通信与-devtools-协议" class="hash-link" aria-label="双向通信与 DevTools 协议的直接链接" title="双向通信与 DevTools 协议的直接链接">​</a></h4><p>Chrome 浏览器在启动的时候，可以通过 <code>--remote-debugging-port</code> 参数设置远程调试端口，如以下命令可以打开 Chrome 并设置远程调试端口为 9222。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">chrome.exe --remote-debugging-port</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">9222</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>之后就可以使用地址 http://localhost:9222 进行远程调试了，比如以下命令可以让 Chrome 浏览器打开一个新的 Tab。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">curl</span><span class="token plain"> http://localhost:9222/json/new</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该命令还会返回此 Tab 的相关信息，其中需要关注的是 webSocketDebuggerUrl，这是该 Tab 的 WebSocket 连接地址。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "id": "29989D...",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "url": "about:blank",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "webSocketDebuggerUrl": "ws://localhost:9222/devtools/page/29989D...",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Driver 模块持有 Connection 实例（负责与浏览器进行通信），该实例在初始化的时候，正是通过调用远程调试端口的<code>/json/new</code>指令打开一个新的 Tab，并使用返回的 webSocketDebuggerUrl 与浏览器建立 WebSocket 连接，之后就可以进行双向通信。</p><ol><li>新开一个 Tab</li></ol><p><img loading="lazy" src="https://p1.music.126.net/eaL2EXZEC08464rFBy9iaw==/109951164431973731.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><ol start="2"><li>建立 WebSocket 连接</li></ol><p><img loading="lazy" src="https://p1.music.126.net/-VHhyIsGazg4bYE5M6nEDQ==/109951164431978136.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>双方建立 WebSocket 连接后，必须使用一种数据格式协议进行通信，该协议就是 Chrome DevTools Protocol，此协议以 JSON 为格式，定义指令的方法名与参数。</p><p>如下图所示，发送 Page.navigate 指令可以让 Chrome 导航至目标页面。发送 Page.captureScreenshot 指令可以让 Chrome 生成当前页面的截图数据。</p><p><img loading="lazy" src="https://p1.music.126.net/5D-dM1H93qwmPbOpGHnfow==/109951164431993587.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>在该协议的<a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noopener noreferrer">文档</a>中，所有的控制指令和事件被划分至多个领域（Domains）如 Page、Network 等。打开 Page 领域，可以找到示例指令 Page.navigate 的详细说明：</p><p><img loading="lazy" src="https://p1.music.126.net/v1z_OCF1Z2Hea9M0cEClvA==/109951164431998671.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>除了 navigate、captureScreenshot 等主动调用的指令外，当我们调用某个领域的 enable 指令后，后续就可以接收到该领域推送的通知事件。</p><p>Lighthouse 通过 Chrome DevTools Protocol 定义的主动指令与事件通知，就实现了操控 Chrome 浏览器，和感知页面加载过程中的各个事件。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="日志记录">日志记录<a href="#日志记录" class="hash-link" aria-label="日志记录的直接链接" title="日志记录的直接链接">​</a></h4><p>Driver 模块中的另外 2 个重要实例是 DevtoolsLog、NetworkRecorder，他们用于将浏览器发出的通知事件进行结构化的存储。其中 DevtoolsLog 会记录各个领域的全量日志，NetworkRecorder 只存储网络相关日志，并会分析出当前网络请求状态（繁忙、空闲）等。</p><p><img loading="lazy" src="https://p1.music.126.net/78-QQu4e5FhQhAOyA-nERQ==/109951164432038402.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>存储的日志信息将在后续的审计（Audits）模块中使用，下文会继续提到他们。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="仿真器emulation">仿真器（emulation）<a href="#仿真器emulation" class="hash-link" aria-label="仿真器（emulation）的直接链接" title="仿真器（emulation）的直接链接">​</a></h4><p>Driver 模块中最后值得一提的部分是仿真器（emulation），该模块的作用是模拟测试设备，如模拟 移动端 / PC 端、屏幕的尺寸，模拟设备的 UserAgent、Cookie、网络限速等。</p><p>这些模拟功能的设置，也是通过 Connection 模块向 Chrome 浏览器发送对应领域的操控指令实现的。</p><p><img loading="lazy" src="https://p1.music.126.net/uEjOlxdk-Upp8CR-L0U9Qw==/109951164432060610.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>至此我们分析完了 Driver 模块的主要组成部分，我们来简单总结下：负责与浏览器的双向通信、记录事件日志、模拟器的设置等。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="gatherer-模块">Gatherer 模块<a href="#gatherer-模块" class="hash-link" aria-label="Gatherer 模块的直接链接" title="Gatherer 模块的直接链接">​</a></h3><p><img loading="lazy" src="https://p1.music.126.net/jbY5zCRtP6Fj3ilVh2ahqg==/109951164432067289.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>该模块的一个重要概念是 pass，官方是这样定义 pass 的：</p><blockquote><p>controls how to load the requested URL
and what information to gather about the page while loading.</p></blockquote><p>即控制页面如何加载，并决定在页面加载过程中采集哪些信息</p><blockquote><p>defines basic settings such as how long to wait for the page to load and whether to record a trace file. Additionally a list of gatherers to use is defined per pass. Gatherers can read information from the page to generate artifacts which are later used by audits to provide you with a Lighthouse report.</p></blockquote><p>即定义页面加载等待时间、是否记录 trace 文件等配置。每个 pass 还定义了一个 gatherers 列表，gatherers 可以从页面中读取需要的信息并生成一个中间产物，
中间产物将会用于后续的审计分析，并最终生成测试报告。</p><p>了解了 pass 的定义，来看一个具体的 pass 配置：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">passes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">passName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'defaultPass'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">recordTrace</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 是否记录Trace信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">useThrottling</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 是否使用限速</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">gatherers</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// gatherers列表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'css-usage'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'viewport-dimensions'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'runtime-exceptions'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'console-messages'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'anchor-elements'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'image-elements'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'link-elements'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'meta-elements'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'script-elements'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'iframe-elements'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 省略</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 省略</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其中的 gatherers 是我们需要关注的重点，每一个 gatherer，在代码仓库中都有与之对应的同名实现文件，并且都继承自相同的父类 Gatherer，其中定义了三个模板方法，子类只需实现关心的模板方法即可。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Gatherer</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 在页面导航前</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">beforePass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">passContext</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 在页面loaded后</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">pass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">passContext</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 在页面加载完毕，且trace信息收集完毕后</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">afterPass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">passContext</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> loadData</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以一个比较简单的 Gatherer 具体实现 RuntimeExceptions 为例，该实例实现了 beforePass 、afterPass 两个生命周期模板方法，其中 driver.on 正是通过上文介绍的 Driver 模块实现的事件监听。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Gatherer</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"./gatherer.js"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">RuntimeExceptions</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Gatherer</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_exceptions</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_onRuntimeExceptionThrown</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">onRuntimeExceptionThrown</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">onRuntimeExceptionThrown</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_exceptions</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 在页面导航前，注册事件监听器，采集错误信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">beforePass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">passContext</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> driver </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> passContext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">driver</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    driver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Runtime.exceptionThrown"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_onRuntimeExceptionThrown</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 在页面加载完毕后，解除事件监听</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">afterPass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">passContext</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> passContext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">driver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">off</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">"Runtime.exceptionThrown"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_onRuntimeExceptionThrown</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_exceptions</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>有了这个参考示例，我们也可以轻松地写一个自定义的 Gatherer，比如用于采集页面标题的 gatherer：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Gatherer</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"./gatherer.js"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getPageTitle</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">title</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">PageTitle</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Gatherer</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">afterPass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">passContext</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> passContext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">driver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">evaluateAsync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">(</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">getPageTitle</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation method function property-access" style="color:#d73a49">toString</span><span class="token template-string interpolation punctuation" style="color:#393A34">(</span><span class="token template-string interpolation punctuation" style="color:#393A34">)</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">())</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们只重写了 afterPass 方法，在该生命中期中，将脚本通过 driver 模块发送给浏览器执行，并获取到执行结果。</p><p>当 pass 中定义的所有 gatherers 运行完后，就会生成一个中间产物 artifacts，此后 Lighthouse 就可以断开与浏览器的连接，只使用 artifacts 进行后续的分析。</p><p>总结下 Gatherer 模块，该模块会通过 pass 这个配置，定义页面如何加载，并运行配置的所有 gatherers 来采集页面加载过程中的信息，并生成中间产物 artifacts。有了 artifacts，就可以进入下一步的 Audits 模块。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="audits-模块">Audits 模块<a href="#audits-模块" class="hash-link" aria-label="Audits 模块的直接链接" title="Audits 模块的直接链接">​</a></h3><p>与 gatherers 类似，在配置文件中也会定义需要运行的 audits，每一个 audits 也都有与之对应的同名实现文件。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">audits</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'errors-in-console'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'metrics/first-contentful-paint'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'metrics/first-meaningful-paint'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'metrics/speed-index'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'metrics/first-cpu-idle'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'metrics/interactive'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'screenshot-thumbnails'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'final-screenshot'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 省略</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 省略</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们还是从最为简单的 errors-in-console 入手，了解下一个 audit 是如何实现的。</p><p>在每个 audit 中都会定义一个静态方法<code>meta()</code>，对该 audit 进行描述，并声明所需的 artifacts，ErrorLogs 这项 audit 就声明了其需要上文提到的 RuntimeExceptions 所生成的中间产物。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ErrorLogs</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Audit</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">meta</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"errors-in-console"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">title</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">str_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">UIStrings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">title</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">failureTitle</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">str_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">UIStrings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">failureTitle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">description</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">str_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">UIStrings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">description</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">requiredArtifacts</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"ConsoleMessages"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"RuntimeExceptions"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Audit 实例需要实现的另一个模板方法是<code>audit()</code>，在该方法中可以拿到所需的中间产物，并基于中间产物计算出本项 audit 的得分与详情。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">audit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">artifacts</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取所需的中间产物</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> runtimeExceptions </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> artifacts</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">RuntimeExceptions</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 数据的过滤与转换</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> runtimeExRows </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      runtimeExceptions</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">entry</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exceptionDetails</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">entry</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> description </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exceptionDetails</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exception</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          entry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exceptionDetails</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exception</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">description</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exceptionDetails</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">text</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token literal-property property" style="color:#36acaa">source</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Runtime.exception'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          description</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token literal-property property" style="color:#36acaa">url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exceptionDetails</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">url</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 省略表格详情生成代码</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 计算出审计项的得分</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> numErrors </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tableRows</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">score</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Number</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numErrors </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">numericValue</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> numErrors</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      details</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>有了上面的示例，我们就可以参照实现一个自定义审计项，如审计页面标题：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">PageTitle</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Audit</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">meta</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"page-title"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">title</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"title of page document"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">failureTitle</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Does not have page title"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">description</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"This audit get document.title when page loaded"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">requiredArtifacts</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"PageTitle"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">audit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">artifacts</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">score</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> artifacts</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">PageTitle</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">displayValue</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> artifacts</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">PageTitle</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"none"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当运行完配置文件中定义的所有审计项后，就得到了每个审计项的评分与详情，后续就进入 Report 模块。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="report-模块">Report 模块<a href="#report-模块" class="hash-link" aria-label="Report 模块的直接链接" title="Report 模块的直接链接">​</a></h3><p>在配置文件中，会定义每个测试类别所需的审计项，以及每个审计项所占的权重。如下所示的为性能（performance）这项测试类别所需的审计项：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-property property" style="color:#36acaa">'performance'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">title</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">str_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">UIStrings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">performanceCategoryTitle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">auditRefs</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'first-contentful-paint'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">weight</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">group</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'metrics'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'first-meaningful-paint'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">weight</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">group</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'metrics'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'speed-index'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">weight</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">group</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'metrics'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'interactive'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">weight</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">group</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'metrics'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'first-cpu-idle'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">weight</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">group</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'metrics'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'max-potential-fid'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">weight</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">group</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'metrics'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 省略</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在最终汇总阶段，Lighthouse 会基于该配置文件以及上一个环节中计算出的每个审计项的评分，加权计算出 performance 的评分。并基于每个审计项的评分与种类，将审计项划分为通过与不通过，对于不通过的审计项会给出详细的测试详情与优化指引。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="fcp-等性能指标审计项的实现">FCP 等性能指标审计项的实现<a href="#fcp-等性能指标审计项的实现" class="hash-link" aria-label="FCP 等性能指标审计项的实现的直接链接" title="FCP 等性能指标审计项的实现的直接链接">​</a></h2><p>在上文介绍整体测试流程的过程中，我选择了最为简单的审计项展开介绍，本节会挑选大家更为关心的性能审计指标如 FCP 展开介绍。</p><blockquote><p>FCP（First Contentful Paint） 首次内容绘制时间，是从页面导航开始，到浏览器从 DOM 中渲染出首个内容的时间。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="限速模拟">限速模拟<a href="#限速模拟" class="hash-link" aria-label="限速模拟的直接链接" title="限速模拟的直接链接">​</a></h3><p>由于页面性能受宿主机网络与 CPU 频率等参数的影响较大，Lighthouse 提供了三种方式供模拟较差的宿主机环境，其背后的逻辑是，如果页面能够在较差的环境下达到一个较好的测试分数、那么大部分用户对页面的直观感受都会较好。</p><p>在 Chrome Devtools 的 Audits 面板中，可以看到三种限速方式：</p><p><img loading="lazy" src="https://p1.music.126.net/cRs259nIe70Tt5bhlph4TA==/109951164432290382.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>上图配置项分别对应下面三种限速方式的介绍</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="simulated">simulated<a href="#simulated" class="hash-link" aria-label="simulated的直接链接" title="simulated的直接链接">​</a></h4><blockquote><p>Throttling is simulated, resulting in faster audit
runs with similar measurement accuracy</p></blockquote><p>即限速是模拟的（加载页面时不进行限速，加载完页面后，模拟计算出在限速条件下的性能指标值），所以可以在较快的速度下地完成审计并有相似的测试精度。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="devtools">devtools<a href="#devtools" class="hash-link" aria-label="devtools的直接链接" title="devtools的直接链接">​</a></h4><blockquote><p>Typical DevTools throttling, with actual traffic shaping
and CPU slowdown applied</p></blockquote><p>即通过 DevTools 进行限速，页面是在一个真实受限的网络与降速 CPU 条件下加载的。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="no-throttling">no throttling<a href="#no-throttling" class="hash-link" aria-label="no throttling的直接链接" title="no throttling的直接链接">​</a></h4><blockquote><p>No network or CPU throttling used.
(Useful when not evaluating performance)</p></blockquote><p>即 Lighthouse 不进行额外的限速，通常在不进行性能测试、或开发者自行对宿主机进行限速时使用该项。</p><p>在三种限速方式中，Lighthouse 真正对网络与 CPU 进行限速的只有 devtools 这种限速方式，实现的方式是通过上文提到的 Driver 模块发送对应领域的指令给 Chrome 浏览器：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 开启CPU限速</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">enableCPUThrottling</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">driver</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> throttlingSettings</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> rate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> throttlingSettings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">cpuSlowdownMultiplier</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> driver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sendCommand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Emulation.setCPUThrottlingRate"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> rate </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 开启网络限速</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">enableNetworkThrottling</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">driver</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> throttlingSettings</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 省略部分代码</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> driver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sendCommand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Network.emulateNetworkConditions"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> conditions</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="trace-信息">Trace 信息<a href="#trace-信息" class="hash-link" aria-label="Trace 信息的直接链接" title="Trace 信息的直接链接">​</a></h3><p>在上文介绍 pass 时，我们提到其中有一个参数用来控制是否收集 Trace 信息，Trace 信息是什么？它又有什么用呢？</p><p>其实我们大部分同学都已经接触过 Trace 信息，它的可视化展示就在 Chrome devtools 中 Performance 面板：</p><p><img loading="lazy" src="https://p1.music.126.net/xJAmmSQiSuSLCiCSF6RVuw==/109951164432359102.png?imageView=1&amp;thumbnail=750x0" alt="image" class="img_ev3q"></p><p>在这个可视化面板中，可以看到页面加载过程中关键渲染节点 FP、FCP、FMP 等，并可以看到主线程进行的 Parse HTML、Layout、JS 的执行依赖情况等。</p><p>当 pass 中配置了开启收集 Trace 信息时，Lighthouse 在页面加载完毕后，就可以拿到完整的 Trace 信息， 从中可以知道页面加载时的 FCP、FMP 等关键渲染节点。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="fcp-的模拟计算">FCP 的模拟计算<a href="#fcp-的模拟计算" class="hash-link" aria-label="FCP 的模拟计算的直接链接" title="FCP 的模拟计算的直接链接">​</a></h3><p>当使用 devtools、no throttling 这两种方式进行限速时，由于页面就是在真实受限的网络条件下加载的，Trace 信息中给出的 FCP 值就是限速条件下的 FCP 值，所以 Lighthouse 无需进行任何额外的加工处理。</p><p>但在 simulated 这种限速方式下，页面是在没有限速的条件下加载，所以 Trace 中的 FCP 是不限速时的 FCP，Lighthouse 需要通过模拟计算的方式，得出在给定限速条件下的 FCP 估算值。接下来我们重点介绍 simulated 这种模拟方式下，FCP 的计算。</p><p>上文我们提到在 Driver 模块中有个 NetworkRecorder，这个模块会记录页面加载过程中的所有网络请求详情，Lighthouse 会为每个有效的网络请求事件建立一个对应的 Network Node 节点。</p><p>Trace 信息中也会记录页面加载过程中 CPU 执行事件，Lighthouse 会为每个有效的 CPU 事件建立一个对应的 CPU Node 节点。</p><p><img loading="lazy" src="https://p1.music.126.net/0X559jq5We58R_Evxfudzg==/109951164432376568.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>紧接着，Lighthouse 会从 Network 请求节点中找出根节点（请求 Document 的节点），并根据节点依赖算法，建立起 CPU 节点与 Network 节点之间的依赖，最终生成页面加载依赖的有向无环图：</p><p><img loading="lazy" src="https://p1.music.126.net/8DpOfnsLMxJ1WC8_fLiVkg==/109951164464186053.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>建立了页面加载所需的完整依赖图后，Lighthouse 会结合 Trace 信息中的 FCP 事件时间，分析出页面 FCP 所需的的依赖图：</p><p><img loading="lazy" src="https://p1.music.126.net/ISsY4ULcx5suJyAmFFDK4Q==/109951164432433536.png?imageView=1&amp;thumbnail=500x0" alt="image" class="img_ev3q"></p><p>有了页面 FCP 所需的依赖图后，Lighthouse 模拟计算出，在限速条件下，请求依赖图中的资源，执行依赖图中的 CPU 事件，所需的耗时，以此得出在特定限速条件下的 FCP 估算值。</p><p><img loading="lazy" src="https://p1.music.126.net/9Yb1szCkhGKqgU5vLtI1Uw==/109951164432437663.png?imageView=1&amp;thumbnail=750x0" alt="image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="模拟-http-请求">模拟 HTTP 请求<a href="#模拟-http-请求" class="hash-link" aria-label="模拟 HTTP 请求的直接链接" title="模拟 HTTP 请求的直接链接">​</a></h3><p>Lighthouse 通过模拟 HTTP 的方式，计算出在特定网络条件下的资源下载耗时，而不是真实地发起网络请求，我们来看下 Lighthouse 是如何做模拟的。</p><p><img loading="lazy" src="https://p1.music.126.net/ZdUR1vPSs8b75NgCmf0RQw==/109951164432467024.png?imageView=1&amp;thumbnail=750x0" alt="image" class="img_ev3q"></p><p><img loading="lazy" src="https://p1.music.126.net/R58QU2rjt5qZhdZ9uslBlw==/109951164432464625.png?imageView=1&amp;thumbnail=750x0" alt="image" class="img_ev3q"></p><p>在上述的代码中，我们看到 Lighthouse 完全是通过模拟 HTTP 的方式，计算出了一个资源在特定网络条件下，所需要的耗时。并且这个模拟考虑了 HTTP2 多路复用技术、 请求是否 KeepAlive、TCP 三次握手、拥塞窗口等细节。</p><p>我们用一张图来总结和对比一下，两种限速方式计算 FCP 的流程差异：</p><p><img loading="lazy" src="https://p1.music.126.net/t9h4x0Y0FCW6BqOq8Ogb2Q==/109951164432474551.png?imageView=1&amp;thumbnail=750x0" alt="image" class="img_ev3q"></p><p>可以看出两种限速方式，都是以 DevTools 给出的 Trace 信息为基础，在 Simulate 限速方式下，在拿到 FCP 值后，还需要模拟计算在限速条件下的估算值。在 Simulate 限速方式下，其他性能指标如 FMP、SpeedIndex 等也是通过类似的方式进行模拟计算，至此我们分析完了 Lighthouse 性能指标 FCP 审计项的实现原理。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>本篇文章为大家简要介绍了 Lighthouse、并分析了 Lighthouse 的测试流程与主要的模块实现，最后向大家介绍了关键性能指标 FCP 的模拟计算方式，希望能对大家有所收获。文末会贴出文章中提到的模块的源码导航，有兴趣的朋友可以看下，欢迎大家进行交流。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="源码导航">源码导航<a href="#源码导航" class="hash-link" aria-label="源码导航的直接链接" title="源码导航的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="driver-模块-1">Driver 模块<a href="#driver-模块-1" class="hash-link" aria-label="Driver 模块的直接链接" title="Driver 模块的直接链接">​</a></h3><ul><li><a href="https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/driver.js" target="_blank" rel="noopener noreferrer">driver</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/connections/cri.js" target="_blank" rel="noopener noreferrer">connection</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/lib/emulation.js" target="_blank" rel="noopener noreferrer">emulation</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/lib/network-recorder.js" target="_blank" rel="noopener noreferrer">network-recorder</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="gatherer-模块-1">Gatherer 模块<a href="#gatherer-模块-1" class="hash-link" aria-label="Gatherer 模块的直接链接" title="Gatherer 模块的直接链接">​</a></h3><ul><li><a href="https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/gather-runner.js" target="_blank" rel="noopener noreferrer">gather-runner</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/gatherers/gatherer.js" target="_blank" rel="noopener noreferrer">gatherer</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/gatherers/runtime-exceptions.js" target="_blank" rel="noopener noreferrer">runtime-exceptions</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="audit-模块">Audit 模块<a href="#audit-模块" class="hash-link" aria-label="Audit 模块的直接链接" title="Audit 模块的直接链接">​</a></h3><ul><li><a href="https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/audits/audit.js" target="_blank" rel="noopener noreferrer">audit</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/tree/master/lighthouse-core/audits" target="_blank" rel="noopener noreferrer">error-in-console</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="fcp-计算">FCP 计算<a href="#fcp-计算" class="hash-link" aria-label="FCP 计算的直接链接" title="FCP 计算的直接链接">​</a></h3><ul><li><a href="https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f8653d66766815fb5ff4f125878cc28/lighthouse-core/audits/metrics/first-contentful-paint.js" target="_blank" rel="noopener noreferrer">audit/fcp</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/metrics/first-contentful-paint.js" target="_blank" rel="noopener noreferrer">computed/fcp</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/metrics/lantern-first-contentful-paint.js" target="_blank" rel="noopener noreferrer">computed/lantern-fcp</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/metrics/lantern-metric.js" target="_blank" rel="noopener noreferrer">computed/lantern-metric</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/page-dependency-graph.js" target="_blank" rel="noopener noreferrer">computed/page-dependency-graph</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/lib/dependency-graph/base-node.js" target="_blank" rel="noopener noreferrer">dependency-graph/base-node</a></li><li><a href="https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/lib/dependency-graph/simulator/tcp-connection.js" target="_blank" rel="noopener noreferrer">dependency-graph/tcp-connection</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考文献">参考文献<a href="#参考文献" class="hash-link" aria-label="参考文献的直接链接" title="参考文献的直接链接">​</a></h2><ul><li><a href="https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f8653d66766815fb5ff4f125878cc28/docs/architecture.md" target="_blank" rel="noopener noreferrer">Lighthouse-architecture</a></li><li><a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noopener noreferrer">Chrome DevTools Protocol</a></li><li><a href="https://developers.google.com/web/tools/lighthouse/v3/scoring" target="_blank" rel="noopener noreferrer">Lighthouse Scoring Guide</a></li></ul>]]></content:encoded>
            <category>lighthouse</category>
            <category>performance</category>
            <category>web</category>
        </item>
        <item>
            <title><![CDATA[前端性能监控平台-存储与计算架构展望]]></title>
            <link>https://kkdev163.github.io/blog/wapm-storage</link>
            <guid>https://kkdev163.github.io/blog/wapm-storage</guid>
            <pubDate>Fri, 29 Mar 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[前言]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a href="#前言" class="hash-link" aria-label="前言的直接链接" title="前言的直接链接">​</a></h3><p>本文首先介绍网易云音乐自研前端性能监控平台的架构现状和当前遇到的问题。随后介绍了 NTSDB 存储引擎可以解决的问题，并进一步给出更符合业界标准的监控平台存储与计算架构。文中 NTSDB 与业界通用架构主要是根据网易数据科学中心时序数据库领域专家-<a href="http://hbasefly.com/author/libisthanksgmail-com/" target="_blank" rel="noopener noreferrer">范欣欣</a>给出的建议整理而来。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="当前架构">当前架构<a href="#当前架构" class="hash-link" aria-label="当前架构的直接链接" title="当前架构的直接链接">​</a></h3><p><img loading="lazy" src="https://p1.music.126.net/tBao5AUpLEFlGenlxk4y0A==/109951163959092198.png" alt="image" class="img_ev3q">
浏览器端 SDK 采集的性能数据会经过 Nginx 负载均衡到 NodeJS 服务器, NodeJS 服务器对上报数据做合法校验后, 直接将原始数据转发至 InfluxProxy,InfluxProxy 根据配置将数据按表分片至底层的 InfluxDB 节点。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="influx-proxy-的集群的优势">Influx Proxy 的集群的优势<a href="#influx-proxy-的集群的优势" class="hash-link" aria-label="Influx Proxy 的集群的优势的直接链接" title="Influx Proxy 的集群的优势的直接链接">​</a></h4><p>当前我们的存储与计算架构的实现主要是依赖于 InfluxProxy、InfluxDB 所构成的计算存储集群。InfluxProxy 为饿了么开源的<a href="https://github.com/shell909090/influx-proxy" target="_blank" rel="noopener noreferrer">组件</a>,主要提供了以下的功能：</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="1按-measurement数据库表名做分片">1.按 measurement(数据库表名)做分片。<a href="#1按-measurement数据库表名做分片" class="hash-link" aria-label="1.按 measurement(数据库表名)做分片。的直接链接" title="1.按 measurement(数据库表名)做分片。的直接链接">​</a></h5><p>Proxy 节点中会维护 DB 节点与 measurement 的映射关系,根据该配置，可将同一个数据库的表存入不同的 DB 节点, 以达到横向扩展的目的。配置示意如下：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table1'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table2'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db3</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table3'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="2-数据备份能力">2. 数据备份能力。<a href="#2-数据备份能力" class="hash-link" aria-label="2. 数据备份能力。的直接链接" title="2. 数据备份能力。的直接链接">​</a></h5><p>InfluxDB 提供 replication 参数设置副本数，但单机版的副本在同一主机上，无法做到高可用。若在 proxy 上将同一张表配置在多个 DB 节点，在数据存入时，Proxy 会将数据写入多个 DB 节点，达到数据备份的目的，在读取时 Proxy 会选择其中一个 DB 节点取出数据，以实现 influxDB 节点的高可用并提高读取性能。配置示意如下：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table2'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table3'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table2'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table3'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="3-写失败时缓存重试能力">3. 写失败时，缓存重试能力。<a href="#3-写失败时缓存重试能力" class="hash-link" aria-label="3. 写失败时，缓存重试能力。的直接链接" title="3. 写失败时，缓存重试能力。的直接链接">​</a></h5><p>当底层的 DB 节点挂掉时，Proxy 节点会将数据先写入本地文件中，待 DB 节点恢复后，Proxy 节点会将数据重新写入 DB 节点。</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="4-高危查询语句过滤能力">4. 高危查询语句过滤能力。<a href="#4-高危查询语句过滤能力" class="hash-link" aria-label="4. 高危查询语句过滤能力。的直接链接" title="4. 高危查询语句过滤能力。的直接链接">​</a></h5><p>若查询语句中不通过 where duration 指定查询范围, influx 会将符合该查询的全部索引加载至内存中，会产生极大的性能开销。Proxy 会过滤类似的高危查询语句。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="当前架构存在的痛点">当前架构存在的痛点<a href="#当前架构存在的痛点" class="hash-link" aria-label="当前架构存在的痛点的直接链接" title="当前架构存在的痛点的直接链接">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="1-proxy-节点当前无高可用">1. Proxy 节点当前无高可用<a href="#1-proxy-节点当前无高可用" class="hash-link" aria-label="1. Proxy 节点当前无高可用的直接链接" title="1. Proxy 节点当前无高可用的直接链接">​</a></h5><p>Proxy 节点为整个存储与计算的入口, 若 Proxy 节点挂掉，性能监控的全部存储与计算服务就挂掉了。当然这个问题并非特别棘手，后续可以通过搭建多台 Proxy, 由 NodeJS 端做负载均衡来解决该问题。</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="2-proxy-是对读写请求做了一层代理非-master-slave-集群模式">2. Proxy 是对读写请求做了一层代理，非 master slave 集群模式<a href="#2-proxy-是对读写请求做了一层代理非-master-slave-集群模式" class="hash-link" aria-label="2. Proxy 是对读写请求做了一层代理，非 master slave 集群模式的直接链接" title="2. Proxy 是对读写请求做了一层代理，非 master slave 集群模式的直接链接">​</a></h5><p>Proxy 节点维护了表与 DB 实例的映射关系，做了一层数据读写的代理。但像创建 Petention Policy(数据保留过期策略)、创建 Continue Query(持续查询)等无法做代理和同步，需要手动连接至 DB 节点进行管理。这样会存在什么问题呢？</p><p>当只有一两个 DB 节点时, 这样手动管理并没有太大问题。但是当 DB 实例个数继续扩大后, 手动管理分片 A 实例、分片 B 实例、分片 A 副本实例、分片 B 副本实例, 若后续还有数据迁移，则 CQ 配置的管理将是一个噩梦。</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="3-扩容和数据迁移成本高">3. 扩容和数据迁移成本高<a href="#3-扩容和数据迁移成本高" class="hash-link" aria-label="3. 扩容和数据迁移成本高的直接链接" title="3. 扩容和数据迁移成本高的直接链接">​</a></h5><p>由于 Proxy 是按照表进行数据的分片, 假设一开始只用到了 Proxy 提供的数据备份能力即按以下进行配置：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table2'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table3'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table4'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table2'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table3'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table4'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当接入的应用数逐步增加后, 一台 db 无法承载 3 张表的存储与计算开销。我们做扩容的工作,比如新申请 2 台机器，把 table3、table4 拆分到新的机器上。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table2'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table2'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db3</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table3'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table4'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db4</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table3'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'table4'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>除了修改 Proxy 的配置，我们还需要将原本 db1 db2 上的数据迁移到 db3、db4 上。并且把原本针对 table3、table4 的 CQ 配置也迁移到 db3、db4。</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="4-仅支持-measurement-层面的分片-无法按数据分片">4. 仅支持 measurement 层面的分片, 无法按数据分片<a href="#4-仅支持-measurement-层面的分片-无法按数据分片" class="hash-link" aria-label="4. 仅支持 measurement 层面的分片, 无法按数据分片的直接链接" title="4. 仅支持 measurement 层面的分片, 无法按数据分片的直接链接">​</a></h5><p>假设随着应用的增多，我们已经忍着剧痛，把数据拆成了这种地步：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table1'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table2'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db3</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table3'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">db4</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'table4'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>之后我们又会遇到新的问题：table1 撑满了。。现在我们除了升级 db1 的机器，再没有别的办法扩容了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ntsdb">NTSDB<a href="#ntsdb" class="hash-link" aria-label="NTSDB的直接链接" title="NTSDB的直接链接">​</a></h3><p>NTSDB 为网易数据科学中心基于 Influx 自研的时序数据库。基本架构示意如下：
<img loading="lazy" src="https://p1.music.126.net/249sryZCD3i2-6gdvlJtAQ==/109951163959223735.png" alt="image" class="img_ev3q"></p><p>集群拥有 3 台 master 节点, 负责接收数据读写请求、同步数据库管理配置如创建 Petention Policy(数据保留过期策略)、创建 Continue Query(持续查询), master 节点非常轻量。实际的存储与计算任务由 Shard Server 进行。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="influx-存储模型简介">Influx 存储模型简介<a href="#influx-存储模型简介" class="hash-link" aria-label="Influx 存储模型简介的直接链接" title="Influx 存储模型简介的直接链接">​</a></h4><p><img loading="lazy" src="https://p1.music.126.net/aMzLd3vJJGPydkRsUWQFYw==/109951163959253224.png" alt="image" class="img_ev3q">
在一张 Influx 数据库之上可以创建任意多个 Rentention Policy(数据保留策略),  一个 RP 可以<a href="https://docs.influxdata.com/influxdb/v1.7/query_language/database_management/#create-retention-policies-with-create-retention-policy" target="_blank" rel="noopener noreferrer">配置</a>如下参数：</p><ul><li>DURATION: 数据过期时间, 过期后的数据自动删除。</li><li>REPLICATION: 副本数 。</li><li>SHARD DURATION: shard group 的持续时长, 持续时间结束后会形成新的 ShardGroup.</li><li>SHARD BUCKET: 每个 Shard Group 包含的 Shard 个数。Influx DB 单机版未提供该参数(默认为 1)、NTSDB 提供该配置。</li></ul><p>举例来说当配置</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token variable" style="color:#36acaa">$CREATE</span><span class="token plain"> RETENTION POLICY </span><span class="token string" style="color:#e3116c">"rp_only_week"</span><span class="token plain"> ON </span><span class="token string" style="color:#e3116c">"wapm"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DURATION 7d </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">REPLICATION </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SHARD DURATION 1d  </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SHARD BUCKET </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们创建了一个名为<code>rp_only_week</code>的 RP, 其数据最长保留 7 天，副本数为 2 个，ShardGroup 的持续时间为 1 天, 每个 ShardGroup 含有 3 个 Shard。</p><p>存入数据时是可以指定 RP(未指定时有默认 RP), 我们可以将上报的原始数据存入 7 天的 RP 内, 将聚合过后的数据，存入一年过期的 RP 内。数据的过期，不是将每一条记录的时间与 duration 做对比，而是判断一个 ShardGroup 内的最新的数据是否已经过期，如果最新一条记录都过期了，则整个 ShardGroup 内的数据做批量删除，效率非常高。</p><p> 当有数据存入时，influx 会将数据的 measurement + tagKey1 + tagValue1 + tagKey2 + tagValue2 +... 形成 SeriesKey, 并将 SeriesKey 做 hash 运算后存入某个 shard 内。同一个 ShardGroup 内 Shard 个数越多，读写性能越高。可以将 Shard 理解为 Influx 实际做存储与计算引擎。</p><p> 回头来看下 NTSDB 的架构：
<img loading="lazy" src="https://p1.music.126.net/249sryZCD3i2-6gdvlJtAQ==/109951163959223735.png" alt="image" class="img_ev3q">
一个数据库的数据可分为多个 shard 落到不同的 ShardServer 上，每个 shard 都有自己的副本，存到不同的主机上，以保证高可用。并且我们可以横向无限地增加 ShardServer 的个数，当一台 ShardServer 无法承担一个 Shard 的压力时，我们可以调整 SHARD BUCKET 的数量，让数据均摊到其他节点。而节点的保活、备份、Petention Policy(数据保留过期策略)、Continue Query(持续查询)的管理都可以只连接到一台 master 上进行管理，master 节点会自动同步给其他节点。</p><p>可以说 NTSDB 完美地解决了我们当前存储架构的痛点。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="标准架构">标准架构<a href="#标准架构" class="hash-link" aria-label="标准架构的直接链接" title="标准架构的直接链接">​</a></h3><p>我们当前的架构可以简单抽象为如下流程：
<img loading="lazy" src="https://p1.music.126.net/FDMpSUh5Cb-oPSOydP5fbQ==/109951163959325299.png" alt="image" class="img_ev3q">
 我们将所有的原始数据存入 Influx, 并在 Influx 上建立 CQ 做预聚合计算，以提高查询性能。</p><p>在此架构之上，我们计划再进一步，引进业界更为通用的存储计算架构：
<img loading="lazy" src="https://p1.music.126.net/SsF26FVK5sqc8xhWz1a4fw==/109951163959336654.png" alt="image" class="img_ev3q"></p><p>我们引入 Kafka 来做消息队列，有如下几点好处：</p><ul><li>原本 Server 直接对 Influx, Influx 若挂掉，则这段时间内的数据就会完全丢失。引入消息队列后，数据可以先入队，后消费。</li><li>可应对高峰流量，高峰流量不常有，如果为了高峰流量而一直预备着高配机器，多少会是一种浪费，而引入 kafka，influx 就不需要有完全匹配高峰流量的配置，高峰时可在 kafka 先缓存，待高峰过后，逐步消费。</li></ul><p>引入 Flink 做聚合计算，有如下几点好处：</p><ul><li>更专业, 大数据分布式计算平台，提供更多的聚合函数，通过写 SQL 就可以完成聚合任务配置。</li><li>更灵活, 未提供的聚合函数，可通过开发 JAR 包的方式，灵活自定义配置。</li></ul><p>网易云音乐基于 Flink 自研的<a href="https://music-rtfm.hz.NetEase.com/magina-doc/" target="_blank" rel="noopener noreferrer">Magina 平台</a>可简化 Flink 的使用，让大数据计算更加亲民。</p><p>文末再次感谢网易数据科学中心-时序数据库领域专家-<a href="http://hbasefly.com/author/libisthanksgmail-com/" target="_blank" rel="noopener noreferrer">范欣欣</a>，对云音乐前端性能监控平台的架构改进提出的宝贵建议。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="参考">参考<a href="#参考" class="hash-link" aria-label="参考的直接链接" title="参考的直接链接">​</a></h3><ul><li><a href="https://docs.influxdata.com/influxdb/v1.7/query_language/database_management/#create-retention-policies-with-create-retention-policy" target="_blank" rel="noopener noreferrer">Influx Db 文档</a></li><li><a href="https://gitbook.cn/books/59428f6f7e850f039399fd02/index.html" target="_blank" rel="noopener noreferrer">刘平：饿了么 Influxdb 实战解析</a></li><li><a href="http://hbasefly.com/2017/12/08/influxdb-1/" target="_blank" rel="noopener noreferrer">范欣欣-时序数据库技术体系 - 初识 InfluxDB</a></li><li><a href="http://hbasefly.com/2018/01/13/timeseries-database-4/" target="_blank" rel="noopener noreferrer">范欣欣-时序数据库技术体系 - InfluxDB TSM 存储引擎之 TSMFile</a></li><li><a href="http://hbasefly.com/2018/02/09/timeseries-database-5/" target="_blank" rel="noopener noreferrer">范欣欣-时序数据库技术体系 - InfluxDB 多维查询之倒排索引</a></li><li><a href="http://kms.NetEase.com/#/article/5933" target="_blank" rel="noopener noreferrer">范欣欣-网易时序数据库，丰富你的技术栈</a></li></ul>]]></content:encoded>
            <category>influxdb</category>
            <category>performance</category>
            <category>web</category>
        </item>
        <item>
            <title><![CDATA[Sentry平台-为Docker Swarm集群添加SSHFS分布式文件存储]]></title>
            <link>https://kkdev163.github.io/blog/sentry-sshfs</link>
            <guid>https://kkdev163.github.io/blog/sentry-sshfs</guid>
            <pubDate>Thu, 28 Mar 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[前言]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a href="#前言" class="hash-link" aria-label="前言的直接链接" title="前言的直接链接">​</a></h3><p>本文首先介绍了网易云音乐私有化部署的 Sentry 平台系统架构和当前业务上遇到的分布式存储问题，最后给出搭建 SSHFS 存储环境解决该问题的实现步骤。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sentry-架构">Sentry 架构<a href="#sentry-架构" class="hash-link" aria-label="Sentry 架构的直接链接" title="Sentry 架构的直接链接">​</a></h3><p><img loading="lazy" src="https://p1.music.126.net/khgxZ3hwssENM7Y8gJ--1Q==/109951163959632735.png" alt="image" class="img_ev3q">
 当前 Sentry 平台的部署采用了三台宿主机构成的 Docker Swarm 集群。Docker 容器内运行的 WSGI 可理解为错误事件的生产者进程, Redis 理解为消息队列，Celery worker 为错误事件的消费进程。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="遇到的问题">遇到的问题<a href="#遇到的问题" class="hash-link" aria-label="遇到的问题的直接链接" title="遇到的问题的直接链接">​</a></h3><p>Sentry 平台提供根据 SourceMap 解析混淆代码的能力, 比如原始收集到的错误如下：
<img loading="lazy" src="https://p1.music.126.net/c5ZHOyvdcvZnAD1eAuaqcA==/109951163895796415.jpg" alt="image" class="img_ev3q">
通过 SourceMap 解析后：
<img loading="lazy" src="https://p1.music.126.net/lLtnyXr7IJ6Yj_NZXRrKkw==/109951163895799468.png" alt="image" class="img_ev3q">
为了保证源代码的安全，sentry 提供了<a href="https://docs.sentry.io/platforms/node/sourcemaps/" target="_blank" rel="noopener noreferrer">Webpack 插件</a>，可将打包后的 js 文件及 sourceMap 文件提前上传至 Sentry 后台，在后续收到错误上报时直接从文件系统中读取 js 及 map 文件。</p><p>Sentry 提供了一层 filestore 抽象配置，用于文件的存储。默认配置下，是写本地磁盘，官网是不建议在生产环境使用的。除此之外 Sentry 还提供了 Google Cloud Storage、Amazon S3 Backend 的配置，类似于网易的 NOS 存储服务。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="直接写本地磁盘会遇到的问题">直接写本地磁盘会遇到的问题？<a href="#直接写本地磁盘会遇到的问题" class="hash-link" aria-label="直接写本地磁盘会遇到的问题？的直接链接" title="直接写本地磁盘会遇到的问题？的直接链接">​</a></h4><p>如下图所示意：当进行文件上传时，Nginx 会随机负载到一台机器上，如宿主机 A。</p><p><img loading="lazy" src="https://p1.music.126.net/eRzeeTxkCi0R5km0NaCTMA==/109951163894174028.png" alt="image" class="img_ev3q"></p><p>当前端产生错误上报时，请求可能会是由宿主机 C 上的消费容器进行处理。消费进程尝试从文件系统中读取 js 及 map 文件，由于无法读取到，此次解析就会失败，展示的还是混淆后的代码。</p><p><img loading="lazy" src="https://p1.music.126.net/txq_IEYwOJsWv78B7gRpFw==/109951163894172228.png" alt="image" class="img_ev3q"></p><p>网上有通过 NFS 来让跨主机的 Docker 集群进行文件共享的<a href="https://www.jianshu.com/p/0d59bc614baa?utm_source=oschina-app" target="_blank" rel="noopener noreferrer">方案</a>，示意图如下：
<img loading="lazy" src="https://p1.music.126.net/YTdUvXsEA4xdTnnS8fu01g==/109951163894176686.png" alt="image" class="img_ev3q">
搭建前想找 PE 同事讨论下能否可以协助搭建，还有方案潜在的风险，PE 评估后觉得 NFS 的方案比较老，不太稳定，不建议去使用。</p><p>与同事们讨论后可能的解决方案有：</p><ul><li><p>方案一: 将三台云主机迁移至 单台物理机上，但是存在单点的问题，并且后续无法扩展。(这可能是最快的方案)。</p></li><li><p>方案二: sentry 提供了亚马逊 s3 及谷歌云存储的配置，可以参考这两个存储的<a href="https://github.com/getsentry/sentry/tree/master/src/sentry/filestore" target="_blank" rel="noopener noreferrer">实现</a>，扩展一个 NOS 的实现。</p></li><li><p>方案三: 搭建 SSHFS 存储方案。</p></li></ul><p>最终评估后，我们采取了 SSHFS 的解决方案。下文对该方案的环境搭建做介绍。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sshfs">SSHFS<a href="#sshfs" class="hash-link" aria-label="SSHFS的直接链接" title="SSHFS的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="首先提供最权威的搭建参考文档">首先提供最权威的搭建参考文档：<a href="#首先提供最权威的搭建参考文档" class="hash-link" aria-label="首先提供最权威的搭建参考文档：的直接链接" title="首先提供最权威的搭建参考文档：的直接链接">​</a></h4><ul><li><a href="https://docs.docker.com/storage/volumes/#use-a-volume-driver" target="_blank" rel="noopener noreferrer">Docker volume driver 文档</a></li><li><a href="https://github.com/vieux/docker-volume-sshfs" target="_blank" rel="noopener noreferrer">docker-volume-sshfs</a></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="搭建后的存储示意图">搭建后的存储示意图：<a href="#搭建后的存储示意图" class="hash-link" aria-label="搭建后的存储示意图：的直接链接" title="搭建后的存储示意图：的直接链接">​</a></h4><p><img loading="lazy" src="https://p1.music.126.net/R5-6tL4aQ6Yl34TwistODw==/109951163959706351.png" alt="image" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="搭建步骤">搭建步骤：<a href="#搭建步骤" class="hash-link" aria-label="搭建步骤：的直接链接" title="搭建步骤：的直接链接">​</a></h4><ol><li><p>三台机器建立 ssh 互访</p><ul><li>申请一个互访的公共账号</li><li>本地创建公私钥对, 可由 sa 协助将公私钥添加至三台机器</li><li>验证 3 台机器可任意进行 ssh 免密互访</li></ul></li><li><p>安装插件
每台机器都需要安装</p></li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$docker plugin install vieux/sshfs sshkey.source=/home/sentry/.ssh/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="3"><li>创建数据卷
每台机器都需要安装</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$docker volume create -d vieux/sshfs -o sshcmd=sentry@hzabj-music-xxxx-machine3:/home/sentry/data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> -o port=1046 -o uid=999,gid=999 -o allow_other sshvolume</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其中 uid=999,gid=999 为 Sentry 的 Docker 镜像内用户 id, 需要登录 Sentry 容器内检查是否一致，若不一致则修改为 Sentry 容器内的 uid.</p><ol start="4"><li>测试
在 machine1 上运行</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$docker run -it --rm  -v sshvolume:/tmp:nocopy sentrybox /bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$touch testfile</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上我们在/tmp 文件夹加下创建了 testfile，不出意外的话，在 machine3 的/home/sentry/data 文件夹内会同步出现该文件，验证文件共享成功。</p><ol start="5"><li>申请一块额外的硬盘，将该硬盘作为共享的数据存储盘
例如申请的新硬盘挂载在 /srv/nbs/0/目录下，则</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$cd /srv/nbs/0/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$mkdir -p ./home/sentry/data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$mount --bind ./home/sentry/data /home/sentry/data/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>进行此操作后，/home/sentry/data/文件夹下的文件会存入新的硬盘。而/home/sentry/data/目录，为我们在第二步创建数据卷时指定的共享目录。经过以上配置，三台机器挂载 sshvolume 后存入的文件，都会落入新的硬盘，达到文件共享的目的。</p><ol start="6"><li>在 Docker Swarm 集群中使用
需要在 docker-compose.yml 文件内配置 sshfsvolume, 具体使用可参考以下配置:
<img loading="lazy" src="https://p1.music.126.net/ZJd6j-m2_VAF0mgCy_SKCw==/109951163959774896.png" alt="image" class="img_ev3q"></li></ol><p>需要注意的是若修改 docker-compose.yml 后，直接 deploy 失败的话，需要先执行 docker stack rm 将已有 service 移除</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$docker stack rm xxx</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>再执行一次</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$docker stack deploy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>至此为 Docker swarm 集群添加 sshfs 文件共享存储环境搭建完成。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="参考资料">参考资料<a href="#参考资料" class="hash-link" aria-label="参考资料的直接链接" title="参考资料的直接链接">​</a></h3><p>根据官网权威文档进行操作时，遇到了一些坑，解决遇到问题的参考的文献如下：</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="solution">solution<a href="#solution" class="hash-link" aria-label="solution的直接链接" title="solution的直接链接">​</a></h4><p><a href="https://github.com/vieux/docker-volume-sshfs" target="_blank" rel="noopener noreferrer">https://github.com/vieux/docker-volume-sshfs</a></p><p><a href="https://docs.docker.com/storage/volumes/#use-a-volume-driver" target="_blank" rel="noopener noreferrer">https://docs.docker.com/storage/volumes/#use-a-volume-driver</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="ssh-public_key">ssh <!-- -->[public_key]<a href="#ssh-public_key" class="hash-link" aria-label="ssh-public_key的直接链接" title="ssh-public_key的直接链接">​</a></h4><p><a href="https://blog.csdn.net/li528405176/article/details/82810342" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/li528405176/article/details/82810342</a></p><p><a href="https://blog.csdn.net/rabit87/article/details/79705163" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/rabit87/article/details/79705163</a></p><p><a href="https://blog.csdn.net/zyf2333/article/details/80373502" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/zyf2333/article/details/80373502</a></p><p><a href="https://www.linuxquestions.org/questions/linux-software-2/sshfs-how-to-find-out-cause-of-read-connection-reset-by-peer-message-4175614683/" target="_blank" rel="noopener noreferrer">https://www.linuxquestions.org/questions/linux-software-2/sshfs-how-to-find-out-cause-of-read-connection-reset-by-peer-message-4175614683/</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="chown-permission-deied-nocopy">chown permission deied <!-- -->[nocopy]<a href="#chown-permission-deied-nocopy" class="hash-link" aria-label="chown-permission-deied-nocopy的直接链接" title="chown-permission-deied-nocopy的直接链接">​</a></h4><p><a href="https://github.com/vieux/docker-volume-sshfs/issues/41" target="_blank" rel="noopener noreferrer">https://github.com/vieux/docker-volume-sshfs/issues/41</a></p><p><a href="https://github.com/docker/docker.github.io/issues/2992" target="_blank" rel="noopener noreferrer">https://github.com/docker/docker.github.io/issues/2992</a></p><p><a href="https://docs.docker.com/engine/reference/run/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/reference/run/</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="permission-allow_other">permission <!-- -->[allow_other]<a href="#permission-allow_other" class="hash-link" aria-label="permission-allow_other的直接链接" title="permission-allow_other的直接链接">​</a></h4><p><a href="https://unix.stackexchange.com/questions/146544/chown-permission-denied-on-owned-dir" target="_blank" rel="noopener noreferrer">https://unix.stackexchange.com/questions/146544/chown-permission-denied-on-owned-dir</a></p><p><a href="https://ubuntuforums.org/showthread.php?t=1961204" target="_blank" rel="noopener noreferrer">https://ubuntuforums.org/showthread.php?t=1961204</a></p><p><a href="https://unix.stackexchange.com/questions/37168/unable-to-use-o-allow-other-with-sshfs-option-enabled-in-fuse-conf" target="_blank" rel="noopener noreferrer">https://unix.stackexchange.com/questions/37168/unable-to-use-o-allow-other-with-sshfs-option-enabled-in-fuse-conf</a></p><p><a href="https://unix.stackexchange.com/questions/222944/mount-with-sshfs-and-write-file-permissions" target="_blank" rel="noopener noreferrer">https://unix.stackexchange.com/questions/222944/mount-with-sshfs-and-write-file-permissions</a></p><p><a href="https://github.com/docker/for-win/issues/497" target="_blank" rel="noopener noreferrer">https://github.com/docker/for-win/issues/497</a></p><p><a href="https://forums.docker.com/t/volume-not-writable-to-non-root-user-container/36103/3" target="_blank" rel="noopener noreferrer">https://forums.docker.com/t/volume-not-writable-to-non-root-user-container/36103/3</a></p><p><a href="https://ubuntuforums.org/showthread.php?t=2036686" target="_blank" rel="noopener noreferrer">https://ubuntuforums.org/showthread.php?t=2036686</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="compose-syntax">compose <!-- -->[syntax]<a href="#compose-syntax" class="hash-link" aria-label="compose-syntax的直接链接" title="compose-syntax的直接链接">​</a></h4><p><a href="https://github.com/vieux/docker-volume-sshfs/issues/48" target="_blank" rel="noopener noreferrer">https://github.com/vieux/docker-volume-sshfs/issues/48</a></p><p><a href="https://github.com/vieux/docker-volume-sshfs/issues/65" target="_blank" rel="noopener noreferrer">https://github.com/vieux/docker-volume-sshfs/issues/65</a></p><p><a href="https://github.com/getsentry/docker-sentry/blob/master/9.0/Dockerfile" target="_blank" rel="noopener noreferrer">https://github.com/getsentry/docker-sentry/blob/master/9.0/Dockerfile</a></p>]]></content:encoded>
            <category>sentry</category>
            <category>sshfs</category>
        </item>
    </channel>
</rss>